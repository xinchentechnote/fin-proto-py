# Code generated by fin-protoc. DO NOT EDIT.
from bytebuf import ByteBuf
from checksum import create_checksum_service
from message_factory import MessageFactory
from codec import *

class Logon(BinaryCodec):
    def __init__(self):
        self.sender_comp_id = ''
        self.target_comp_id = ''
        self.heart_btint = 0
        self.password = ''
        self.default_appl_ver_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.sender_comp_id, 20, 'utf-8')
        write_fixed_string(buffer, self.target_comp_id, 20, 'utf-8')
        buffer.write_i32(self.heart_btint)
        write_fixed_string(buffer, self.password, 16, 'utf-8')
        write_fixed_string(buffer, self.default_appl_ver_id, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.sender_comp_id = get_fixed_string(buffer, 20, 'utf-8')
        self.target_comp_id = get_fixed_string(buffer, 20, 'utf-8')
        self.heart_btint = buffer.read_i32()
        self.password = get_fixed_string(buffer, 16, 'utf-8')
        self.default_appl_ver_id = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.sender_comp_id == other.sender_comp_id,
            self.target_comp_id == other.target_comp_id,
            self.heart_btint == other.heart_btint,
            self.password == other.password,
            self.default_appl_ver_id == other.default_appl_ver_id
        ])
        
    


class Logout(BinaryCodec):
    def __init__(self):
        self.session_status = 0
        self.text = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.session_status)
        write_fixed_string(buffer, self.text, 200, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.session_status = buffer.read_i32()
        self.text = get_fixed_string(buffer, 200, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.session_status == other.session_status,
            self.text == other.text
        ])
        
    


class Heartbeat(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    


class Extend100101(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend100201(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force
        ])
        
    

class Extend100301(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force
        ])
        
    

class Extend100501(BinaryCodec):
    def __init__(self):
        self.confirm_id = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.confirm_id, 8, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.confirm_id = get_fixed_string(buffer, 8, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.confirm_id == other.confirm_id,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend100601(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend100701(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16()
        self.expiration_type = buffer.read_u8()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.share_property == other.share_property
        ])
        
    

class Extend101501(BinaryCodec):
    def __init__(self):
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.share_property == other.share_property
        ])
        
    

class Extend101601(BinaryCodec):
    def __init__(self):
        self.contract_account_code = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.contract_account_code == other.contract_account_code
        ])
        
    

class Extend101701(BinaryCodec):
    def __init__(self):
        self.cash_order_qty = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.cash_order_qty)
    
    def decode(self, buffer: ByteBuf):
        self.cash_order_qty = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_order_qty == other.cash_order_qty
        ])
        
    

class Extend101801(BinaryCodec):
    def __init__(self):
        self.tenderer = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.tenderer, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.tenderer = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.tenderer == other.tenderer
        ])
        
    

class Extend102701(BinaryCodec):
    def __init__(self):
        self.disposal_pbu = ''
        self.disposal_account_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.disposal_pbu, 6, 'utf-8')
        write_fixed_string(buffer, self.disposal_account_id, 12, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.disposal_pbu = get_fixed_string(buffer, 6, 'utf-8')
        self.disposal_account_id = get_fixed_string(buffer, 12, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.disposal_pbu == other.disposal_pbu,
            self.disposal_account_id == other.disposal_account_id
        ])
        
    

class Extend102801(BinaryCodec):
    def __init__(self):
        self.lender_pbu = ''
        self.lender_account_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.lender_pbu, 6, 'utf-8')
        write_fixed_string(buffer, self.lender_account_id, 12, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.lender_pbu = get_fixed_string(buffer, 6, 'utf-8')
        self.lender_account_id = get_fixed_string(buffer, 12, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.lender_pbu == other.lender_pbu,
            self.lender_account_id == other.lender_account_id
        ])
        
    

class Extend102901(BinaryCodec):
    def __init__(self):
        self.deduction_pbu = ''
        self.deduction_account_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.deduction_pbu, 6, 'utf-8')
        write_fixed_string(buffer, self.deduction_account_id, 12, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.deduction_pbu = get_fixed_string(buffer, 6, 'utf-8')
        self.deduction_account_id = get_fixed_string(buffer, 12, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.deduction_pbu == other.deduction_pbu,
            self.deduction_account_id == other.deduction_account_id
        ])
        
    

class Extend106301(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.lot_type = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.lot_type, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.lot_type = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.lot_type == other.lot_type
        ])
        
    

class Extend103501(BinaryCodec):
    def __init__(self):
        self.contract_account_code = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.contract_account_code == other.contract_account_code
        ])
        
    

class Extend103701(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend104101(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend104128(BinaryCodec):
    def __init__(self):
        self.member_id = ''
        self.investor_type = ''
        self.investor_id = ''
        self.investor_name = ''
        self.trader_code = ''
        self.secondary_order_id = ''
        self.bid_trans_type = 0
        self.bid_exec_inst_type = 0
        self.low_limit_price = 0
        self.high_limit_price = 0
        self.min_qty = 0
        self.trade_date = 0
        self.settl_type = 0
        self.settl_period = 0
        self.pre_trade_anonymity = 0
        self.cash_margin = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.investor_type, 2, 'utf-8')
        write_fixed_string(buffer, self.investor_id, 10, 'utf-8')
        write_fixed_string(buffer, self.investor_name, 120, 'utf-8')
        write_fixed_string(buffer, self.trader_code, 8, 'utf-8')
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
        buffer.write_u16(self.bid_trans_type)
        buffer.write_u16(self.bid_exec_inst_type)
        buffer.write_i64(self.low_limit_price)
        buffer.write_i64(self.high_limit_price)
        buffer.write_i64(self.min_qty)
        buffer.write_u32(self.trade_date)
        buffer.write_u16(self.settl_type)
        buffer.write_u8(self.settl_period)
        buffer.write_u8(self.pre_trade_anonymity)
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.memo, 160, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.investor_type = get_fixed_string(buffer, 2, 'utf-8')
        self.investor_id = get_fixed_string(buffer, 10, 'utf-8')
        self.investor_name = get_fixed_string(buffer, 120, 'utf-8')
        self.trader_code = get_fixed_string(buffer, 8, 'utf-8')
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.bid_trans_type = buffer.read_u16()
        self.bid_exec_inst_type = buffer.read_u16()
        self.low_limit_price = buffer.read_i64()
        self.high_limit_price = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.trade_date = buffer.read_u32()
        self.settl_type = buffer.read_u16()
        self.settl_period = buffer.read_u8()
        self.pre_trade_anonymity = buffer.read_u8()
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.memo = get_fixed_string(buffer, 160, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.member_id == other.member_id,
            self.investor_type == other.investor_type,
            self.investor_id == other.investor_id,
            self.investor_name == other.investor_name,
            self.trader_code == other.trader_code,
            self.secondary_order_id == other.secondary_order_id,
            self.bid_trans_type == other.bid_trans_type,
            self.bid_exec_inst_type == other.bid_exec_inst_type,
            self.low_limit_price == other.low_limit_price,
            self.high_limit_price == other.high_limit_price,
            self.min_qty == other.min_qty,
            self.trade_date == other.trade_date,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.pre_trade_anonymity == other.pre_trade_anonymity,
            self.cash_margin == other.cash_margin,
            self.memo == other.memo
        ])
        
    

class Extend104701(BinaryCodec):
    def __init__(self):
        self.secondary_order_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.secondary_order_id == other.secondary_order_id
        ])
        
    

class NewOrderMessageFactory(MessageFactory[str, BinaryCodec]): ...
newOrderMessageFactory = NewOrderMessageFactory()
newOrderMessageFactory.register("010", Extend100101)
newOrderMessageFactory.register("020", Extend100201)
newOrderMessageFactory.register("030", Extend100301)
newOrderMessageFactory.register("051", Extend100501)
newOrderMessageFactory.register("052", Extend100501)
newOrderMessageFactory.register("060", Extend100601)
newOrderMessageFactory.register("061", Extend100601)
newOrderMessageFactory.register("070", Extend100701)
newOrderMessageFactory.register("150", Extend101501)
newOrderMessageFactory.register("151", Extend101501)
newOrderMessageFactory.register("152", Extend101501)
newOrderMessageFactory.register("160", Extend101601)
newOrderMessageFactory.register("170", Extend101701)
newOrderMessageFactory.register("180", Extend101801)
newOrderMessageFactory.register("181", Extend101801)
newOrderMessageFactory.register("270", Extend102701)
newOrderMessageFactory.register("271", Extend102701)
newOrderMessageFactory.register("280", Extend102801)
newOrderMessageFactory.register("281", Extend102801)
newOrderMessageFactory.register("290", Extend102901)
newOrderMessageFactory.register("291", Extend102901)
newOrderMessageFactory.register("630", Extend106301)
newOrderMessageFactory.register("350", Extend103501)
newOrderMessageFactory.register("351", Extend103501)
newOrderMessageFactory.register("370", Extend103701)
newOrderMessageFactory.register("410", Extend104101)
newOrderMessageFactory.register("417", Extend104128)
newOrderMessageFactory.register("470", Extend104701)


class NewOrder(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.account_id = ''
        self.branch_id = ''
        self.order_restrictions = ''
        self.side = ''
        self.ord_type = ''
        self.order_qty = 0
        self.price = 0
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 12, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 4, 'utf-8')
        write_fixed_string(buffer, self.order_restrictions, 4, 'utf-8')
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_type, 1, 'utf-8')
        buffer.write_i64(self.order_qty)
        buffer.write_i64(self.price)
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64()
        self.user_info = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 12, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 4, 'utf-8')
        self.order_restrictions = get_fixed_string(buffer, 4, 'utf-8')
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_type = get_fixed_string(buffer, 1, 'utf-8')
        self.order_qty = buffer.read_i64()
        self.price = buffer.read_i64()
        self.appl_extend = newOrderMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.order_restrictions == other.order_restrictions,
            self.side == other.side,
            self.ord_type == other.ord_type,
            self.order_qty == other.order_qty,
            self.price == other.price,
            self.appl_extend == other.appl_extend
        ])
        
    








class Extend101401(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.position_effect = ''
        self.covered_or_uncovered = 0
        self.contract_account_code = ''
        self.secondary_order_id = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.position_effect, 1, 'utf-8')
        buffer.write_u8(self.covered_or_uncovered)
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.position_effect = get_fixed_string(buffer, 1, 'utf-8')
        self.covered_or_uncovered = buffer.read_u8()
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.position_effect == other.position_effect,
            self.covered_or_uncovered == other.covered_or_uncovered,
            self.contract_account_code == other.contract_account_code,
            self.secondary_order_id == other.secondary_order_id
        ])
        
    


































class Extend200102(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend200202(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force
        ])
        
    

class Extend200302(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force
        ])
        
    

class Extend200502(BinaryCodec):
    def __init__(self):
        self.confirm_id = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.confirm_id, 8, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.confirm_id = get_fixed_string(buffer, 8, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.confirm_id == other.confirm_id,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend200602(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend200702(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16()
        self.expiration_type = buffer.read_u8()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.share_property == other.share_property
        ])
        
    

class Extend201502(BinaryCodec):
    def __init__(self):
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.share_property == other.share_property
        ])
        
    

class Extend201602(BinaryCodec):
    def __init__(self):
        self.contract_account_code = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.contract_account_code == other.contract_account_code
        ])
        
    

class Extend201702(BinaryCodec):
    def __init__(self):
        self.cash_order_qty = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.cash_order_qty)
    
    def decode(self, buffer: ByteBuf):
        self.cash_order_qty = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_order_qty == other.cash_order_qty
        ])
        
    

class Extend201802(BinaryCodec):
    def __init__(self):
        self.tenderer = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.tenderer, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.tenderer = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.tenderer == other.tenderer
        ])
        
    

class Extend202702(BinaryCodec):
    def __init__(self):
        self.disposal_pbu = ''
        self.disposal_account_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.disposal_pbu, 6, 'utf-8')
        write_fixed_string(buffer, self.disposal_account_id, 12, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.disposal_pbu = get_fixed_string(buffer, 6, 'utf-8')
        self.disposal_account_id = get_fixed_string(buffer, 12, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.disposal_pbu == other.disposal_pbu,
            self.disposal_account_id == other.disposal_account_id
        ])
        
    

class Extend202802(BinaryCodec):
    def __init__(self):
        self.lender_pbu = ''
        self.lender_account_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.lender_pbu, 6, 'utf-8')
        write_fixed_string(buffer, self.lender_account_id, 12, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.lender_pbu = get_fixed_string(buffer, 6, 'utf-8')
        self.lender_account_id = get_fixed_string(buffer, 12, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.lender_pbu == other.lender_pbu,
            self.lender_account_id == other.lender_account_id
        ])
        
    

class Extend202902(BinaryCodec):
    def __init__(self):
        self.deduction_pbu = ''
        self.deduction_account_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.deduction_pbu, 6, 'utf-8')
        write_fixed_string(buffer, self.deduction_account_id, 12, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.deduction_pbu = get_fixed_string(buffer, 6, 'utf-8')
        self.deduction_account_id = get_fixed_string(buffer, 12, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.deduction_pbu == other.deduction_pbu,
            self.deduction_account_id == other.deduction_account_id
        ])
        
    

class Extend206302(BinaryCodec):
    def __init__(self):
        self.reject_text = ''
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.lot_type = ''
        self.imc_reject_text_len = 0
        self.imc_reject_text = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.reject_text, 16, 'utf-8')
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.lot_type, 1, 'utf-8')
        buffer.write_u32(self.imc_reject_text_len)
        put_string(buffer, self.imc_reject_text, 'u32')
    
    def decode(self, buffer: ByteBuf):
        self.reject_text = get_fixed_string(buffer, 16, 'utf-8')
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.lot_type = get_fixed_string(buffer, 1, 'utf-8')
        self.imc_reject_text_len = buffer.read_u32()
        self.imc_reject_text = get_string(buffer,'u32')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.reject_text == other.reject_text,
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.lot_type == other.lot_type,
            self.imc_reject_text_len == other.imc_reject_text_len,
            self.imc_reject_text == other.imc_reject_text
        ])
        
    

class Extend203502(BinaryCodec):
    def __init__(self):
        self.contract_account_code = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.contract_account_code == other.contract_account_code
        ])
        
    

class Extend203702(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend204102(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend204129(BinaryCodec):
    def __init__(self):
        self.member_id = ''
        self.investor_type = ''
        self.investor_id = ''
        self.investor_name = ''
        self.trader_code = ''
        self.secondary_order_id = ''
        self.bid_trans_type = 0
        self.bid_exec_inst_type = 0
        self.low_limit_price = 0
        self.high_limit_price = 0
        self.min_qty = 0
        self.trade_date = 0
        self.settl_type = 0
        self.settl_period = 0
        self.pre_trade_anonymity = 0
        self.cash_margin = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.investor_type, 2, 'utf-8')
        write_fixed_string(buffer, self.investor_id, 10, 'utf-8')
        write_fixed_string(buffer, self.investor_name, 120, 'utf-8')
        write_fixed_string(buffer, self.trader_code, 8, 'utf-8')
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
        buffer.write_u16(self.bid_trans_type)
        buffer.write_u16(self.bid_exec_inst_type)
        buffer.write_i64(self.low_limit_price)
        buffer.write_i64(self.high_limit_price)
        buffer.write_i64(self.min_qty)
        buffer.write_u32(self.trade_date)
        buffer.write_u16(self.settl_type)
        buffer.write_u8(self.settl_period)
        buffer.write_u8(self.pre_trade_anonymity)
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.memo, 160, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.investor_type = get_fixed_string(buffer, 2, 'utf-8')
        self.investor_id = get_fixed_string(buffer, 10, 'utf-8')
        self.investor_name = get_fixed_string(buffer, 120, 'utf-8')
        self.trader_code = get_fixed_string(buffer, 8, 'utf-8')
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.bid_trans_type = buffer.read_u16()
        self.bid_exec_inst_type = buffer.read_u16()
        self.low_limit_price = buffer.read_i64()
        self.high_limit_price = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.trade_date = buffer.read_u32()
        self.settl_type = buffer.read_u16()
        self.settl_period = buffer.read_u8()
        self.pre_trade_anonymity = buffer.read_u8()
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.memo = get_fixed_string(buffer, 160, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.member_id == other.member_id,
            self.investor_type == other.investor_type,
            self.investor_id == other.investor_id,
            self.investor_name == other.investor_name,
            self.trader_code == other.trader_code,
            self.secondary_order_id == other.secondary_order_id,
            self.bid_trans_type == other.bid_trans_type,
            self.bid_exec_inst_type == other.bid_exec_inst_type,
            self.low_limit_price == other.low_limit_price,
            self.high_limit_price == other.high_limit_price,
            self.min_qty == other.min_qty,
            self.trade_date == other.trade_date,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.pre_trade_anonymity == other.pre_trade_anonymity,
            self.cash_margin == other.cash_margin,
            self.memo == other.memo
        ])
        
    

class Extend204702(BinaryCodec):
    def __init__(self):
        self.secondary_order_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.secondary_order_id == other.secondary_order_id
        ])
        
    

class ExecutionConfirmMessageFactory(MessageFactory[str, BinaryCodec]): ...
executionConfirmMessageFactory = ExecutionConfirmMessageFactory()
executionConfirmMessageFactory.register("010", Extend200102)
executionConfirmMessageFactory.register("020", Extend200202)
executionConfirmMessageFactory.register("030", Extend200302)
executionConfirmMessageFactory.register("051", Extend200502)
executionConfirmMessageFactory.register("052", Extend200502)
executionConfirmMessageFactory.register("060", Extend200602)
executionConfirmMessageFactory.register("061", Extend200602)
executionConfirmMessageFactory.register("070", Extend200702)
executionConfirmMessageFactory.register("150", Extend201502)
executionConfirmMessageFactory.register("151", Extend201502)
executionConfirmMessageFactory.register("152", Extend201502)
executionConfirmMessageFactory.register("160", Extend201602)
executionConfirmMessageFactory.register("170", Extend201702)
executionConfirmMessageFactory.register("180", Extend201802)
executionConfirmMessageFactory.register("181", Extend201802)
executionConfirmMessageFactory.register("270", Extend202702)
executionConfirmMessageFactory.register("271", Extend202702)
executionConfirmMessageFactory.register("280", Extend202802)
executionConfirmMessageFactory.register("281", Extend202802)
executionConfirmMessageFactory.register("290", Extend202902)
executionConfirmMessageFactory.register("291", Extend202902)
executionConfirmMessageFactory.register("630", Extend206302)
executionConfirmMessageFactory.register("350", Extend203502)
executionConfirmMessageFactory.register("351", Extend203502)
executionConfirmMessageFactory.register("370", Extend203702)
executionConfirmMessageFactory.register("410", Extend204102)
executionConfirmMessageFactory.register("417", Extend204129)
executionConfirmMessageFactory.register("470", Extend204702)


class ExecutionConfirm(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.order_id = ''
        self.cl_ord_id = ''
        self.quote_msg_id = ''
        self.orig_cl_ord_id = ''
        self.exec_id = ''
        self.exec_type = ''
        self.ord_status = ''
        self.ord_rej_reason = 0
        self.leaves_qty = 0
        self.cum_qty = 0
        self.side = ''
        self.ord_type = ''
        self.order_qty = 0
        self.price = 0
        self.account_id = ''
        self.branch_id = ''
        self.order_restrictions = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.partition_no)
        buffer.write_i64(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 8, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_msg_id, 10, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_type, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        buffer.write_u16(self.ord_rej_reason)
        buffer.write_i64(self.leaves_qty)
        buffer.write_i64(self.cum_qty)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_type, 1, 'utf-8')
        buffer.write_i64(self.order_qty)
        buffer.write_i64(self.price)
        write_fixed_string(buffer, self.account_id, 12, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 4, 'utf-8')
        write_fixed_string(buffer, self.order_restrictions, 4, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32()
        self.report_index = buffer.read_i64()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64()
        self.user_info = get_fixed_string(buffer, 8, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_msg_id = get_fixed_string(buffer, 10, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_type = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_rej_reason = buffer.read_u16()
        self.leaves_qty = buffer.read_i64()
        self.cum_qty = buffer.read_i64()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_type = get_fixed_string(buffer, 1, 'utf-8')
        self.order_qty = buffer.read_i64()
        self.price = buffer.read_i64()
        self.account_id = get_fixed_string(buffer, 12, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 4, 'utf-8')
        self.order_restrictions = get_fixed_string(buffer, 4, 'utf-8')
        self.appl_extend = executionConfirmMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.order_id == other.order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.quote_msg_id == other.quote_msg_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.exec_id == other.exec_id,
            self.exec_type == other.exec_type,
            self.ord_status == other.ord_status,
            self.ord_rej_reason == other.ord_rej_reason,
            self.leaves_qty == other.leaves_qty,
            self.cum_qty == other.cum_qty,
            self.side == other.side,
            self.ord_type == other.ord_type,
            self.order_qty == other.order_qty,
            self.price == other.price,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.order_restrictions == other.order_restrictions,
            self.appl_extend == other.appl_extend
        ])
        
    








class Extend200402(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.position_effect = ''
        self.covered_or_uncovered = 0
        self.contract_account_code = ''
        self.secondary_order_id = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64(self.stop_px)
        buffer.write_i64(self.min_qty)
        buffer.write_u16(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.position_effect, 1, 'utf-8')
        buffer.write_u8(self.covered_or_uncovered)
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64()
        self.min_qty = buffer.read_i64()
        self.max_price_levels = buffer.read_u16()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.position_effect = get_fixed_string(buffer, 1, 'utf-8')
        self.covered_or_uncovered = buffer.read_u8()
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.position_effect == other.position_effect,
            self.covered_or_uncovered == other.covered_or_uncovered,
            self.contract_account_code == other.contract_account_code,
            self.secondary_order_id == other.secondary_order_id
        ])
        
    








class Extend201202(BinaryCodec):
    def __init__(self):
        self.insufficient_security_id = ''
        self.no_security = 0
        self.underlying_security_id = ''
        self.underlying_security_id_source = ''
        self.delivery_qty = 0
        self.subst_cash = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.insufficient_security_id, 8, 'utf-8')
        buffer.write_u32(self.no_security)
        write_fixed_string(buffer, self.underlying_security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.underlying_security_id_source, 4, 'utf-8')
        buffer.write_i64(self.delivery_qty)
        buffer.write_i64(self.subst_cash)
    
    def decode(self, buffer: ByteBuf):
        self.insufficient_security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.no_security = buffer.read_u32()
        self.underlying_security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.underlying_security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.delivery_qty = buffer.read_i64()
        self.subst_cash = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.insufficient_security_id == other.insufficient_security_id,
            self.no_security == other.no_security,
            self.underlying_security_id == other.underlying_security_id,
            self.underlying_security_id_source == other.underlying_security_id_source,
            self.delivery_qty == other.delivery_qty,
            self.subst_cash == other.subst_cash
        ])
        
    
















class Extend203102(BinaryCodec):
    def __init__(self):
        self.insufficient_security_id = ''
        self.no_security = 0
        self.underlying_security_id = ''
        self.underlying_security_id_source = ''
        self.delivery_qty = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.insufficient_security_id, 8, 'utf-8')
        buffer.write_u32(self.no_security)
        write_fixed_string(buffer, self.underlying_security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.underlying_security_id_source, 4, 'utf-8')
        buffer.write_i64(self.delivery_qty)
    
    def decode(self, buffer: ByteBuf):
        self.insufficient_security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.no_security = buffer.read_u32()
        self.underlying_security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.underlying_security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.delivery_qty = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.insufficient_security_id == other.insufficient_security_id,
            self.no_security == other.no_security,
            self.underlying_security_id == other.underlying_security_id,
            self.underlying_security_id_source == other.underlying_security_id_source,
            self.delivery_qty == other.delivery_qty
        ])
        
    














class Extend200115(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend200215(BinaryCodec):
    def __init__(self):
        self.maturity_date = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.maturity_date)
    
    def decode(self, buffer: ByteBuf):
        self.maturity_date = buffer.read_u32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.maturity_date == other.maturity_date
        ])
        
    

class Extend200315(BinaryCodec):
    def __init__(self):
        self.maturity_date = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.maturity_date)
    
    def decode(self, buffer: ByteBuf):
        self.maturity_date = buffer.read_u32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.maturity_date == other.maturity_date
        ])
        
    

class Extend200515(BinaryCodec):
    def __init__(self):
        self.confirm_id = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.confirm_id, 8, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.confirm_id = get_fixed_string(buffer, 8, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.confirm_id == other.confirm_id,
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend200615(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend200715(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.maturity_date = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        buffer.write_u32(self.maturity_date)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16()
        self.expiration_type = buffer.read_u8()
        self.maturity_date = buffer.read_u32()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.maturity_date == other.maturity_date,
            self.share_property == other.share_property
        ])
        
    

class Extend206315(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend203715(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class Extend204115(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
        self.settl_type = 0
        self.settl_period = 0
        self.counterparty_member_id = ''
        self.counterparty_investor_type = ''
        self.counterparty_investor_id = ''
        self.counterparty_investor_name = ''
        self.counterparty_trader_code = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        buffer.write_u16(self.settl_type)
        buffer.write_u8(self.settl_period)
        write_fixed_string(buffer, self.counterparty_member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.counterparty_investor_type, 2, 'utf-8')
        write_fixed_string(buffer, self.counterparty_investor_id, 10, 'utf-8')
        write_fixed_string(buffer, self.counterparty_investor_name, 120, 'utf-8')
        write_fixed_string(buffer, self.counterparty_trader_code, 8, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_type = buffer.read_u16()
        self.settl_period = buffer.read_u8()
        self.counterparty_member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.counterparty_investor_type = get_fixed_string(buffer, 2, 'utf-8')
        self.counterparty_investor_id = get_fixed_string(buffer, 10, 'utf-8')
        self.counterparty_investor_name = get_fixed_string(buffer, 120, 'utf-8')
        self.counterparty_trader_code = get_fixed_string(buffer, 8, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.counterparty_member_id == other.counterparty_member_id,
            self.counterparty_investor_type == other.counterparty_investor_type,
            self.counterparty_investor_id == other.counterparty_investor_id,
            self.counterparty_investor_name == other.counterparty_investor_name,
            self.counterparty_trader_code == other.counterparty_trader_code
        ])
        
    

class Extend204130(BinaryCodec):
    def __init__(self):
        self.member_id = ''
        self.investor_type = ''
        self.investor_id = ''
        self.investor_name = ''
        self.trader_code = ''
        self.counterparty_member_id = ''
        self.counterparty_investor_type = ''
        self.counterparty_investor_id = ''
        self.counterparty_investor_name = ''
        self.counterparty_trader_code = ''
        self.secondary_order_id = ''
        self.bid_trans_type = 0
        self.bid_exec_inst_type = 0
        self.settl_type = 0
        self.settl_period = 0
        self.cash_margin = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.investor_type, 2, 'utf-8')
        write_fixed_string(buffer, self.investor_id, 10, 'utf-8')
        write_fixed_string(buffer, self.investor_name, 120, 'utf-8')
        write_fixed_string(buffer, self.trader_code, 8, 'utf-8')
        write_fixed_string(buffer, self.counterparty_member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.counterparty_investor_type, 2, 'utf-8')
        write_fixed_string(buffer, self.counterparty_investor_id, 10, 'utf-8')
        write_fixed_string(buffer, self.counterparty_investor_name, 120, 'utf-8')
        write_fixed_string(buffer, self.counterparty_trader_code, 8, 'utf-8')
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
        buffer.write_u16(self.bid_trans_type)
        buffer.write_u16(self.bid_exec_inst_type)
        buffer.write_u16(self.settl_type)
        buffer.write_u8(self.settl_period)
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.memo, 160, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.investor_type = get_fixed_string(buffer, 2, 'utf-8')
        self.investor_id = get_fixed_string(buffer, 10, 'utf-8')
        self.investor_name = get_fixed_string(buffer, 120, 'utf-8')
        self.trader_code = get_fixed_string(buffer, 8, 'utf-8')
        self.counterparty_member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.counterparty_investor_type = get_fixed_string(buffer, 2, 'utf-8')
        self.counterparty_investor_id = get_fixed_string(buffer, 10, 'utf-8')
        self.counterparty_investor_name = get_fixed_string(buffer, 120, 'utf-8')
        self.counterparty_trader_code = get_fixed_string(buffer, 8, 'utf-8')
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.bid_trans_type = buffer.read_u16()
        self.bid_exec_inst_type = buffer.read_u16()
        self.settl_type = buffer.read_u16()
        self.settl_period = buffer.read_u8()
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.memo = get_fixed_string(buffer, 160, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.member_id == other.member_id,
            self.investor_type == other.investor_type,
            self.investor_id == other.investor_id,
            self.investor_name == other.investor_name,
            self.trader_code == other.trader_code,
            self.counterparty_member_id == other.counterparty_member_id,
            self.counterparty_investor_type == other.counterparty_investor_type,
            self.counterparty_investor_id == other.counterparty_investor_id,
            self.counterparty_investor_name == other.counterparty_investor_name,
            self.counterparty_trader_code == other.counterparty_trader_code,
            self.secondary_order_id == other.secondary_order_id,
            self.bid_trans_type == other.bid_trans_type,
            self.bid_exec_inst_type == other.bid_exec_inst_type,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.cash_margin == other.cash_margin,
            self.memo == other.memo
        ])
        
    

class Extend204715(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.maturity_date = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        buffer.write_u32(self.maturity_date)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16()
        self.expiration_type = buffer.read_u8()
        self.maturity_date = buffer.read_u32()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.maturity_date == other.maturity_date,
            self.share_property == other.share_property
        ])
        
    

class ExecutionReportMessageFactory(MessageFactory[str, BinaryCodec]): ...
executionReportMessageFactory = ExecutionReportMessageFactory()
executionReportMessageFactory.register("010", Extend200115)
executionReportMessageFactory.register("020", Extend200215)
executionReportMessageFactory.register("030", Extend200315)
executionReportMessageFactory.register("051", Extend200515)
executionReportMessageFactory.register("052", Extend200515)
executionReportMessageFactory.register("056", Extend200515)
executionReportMessageFactory.register("057", Extend200515)
executionReportMessageFactory.register("060", Extend200615)
executionReportMessageFactory.register("061", Extend200615)
executionReportMessageFactory.register("070", Extend200715)
executionReportMessageFactory.register("630", Extend206315)
executionReportMessageFactory.register("370", Extend203715)
executionReportMessageFactory.register("410", Extend204115)
executionReportMessageFactory.register("412", Extend204115)
executionReportMessageFactory.register("413", Extend204115)
executionReportMessageFactory.register("415", Extend204115)
executionReportMessageFactory.register("416", Extend204115)
executionReportMessageFactory.register("417", Extend204130)
executionReportMessageFactory.register("470", Extend204715)


class ExecutionReport(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.order_id = ''
        self.cl_ord_id = ''
        self.quote_msg_id = ''
        self.exec_id = ''
        self.exec_type = ''
        self.ord_status = ''
        self.last_px = 0
        self.last_qty = 0
        self.leaves_qty = 0
        self.cum_qty = 0
        self.side = ''
        self.account_id = ''
        self.branch_id = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.partition_no)
        buffer.write_i64(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 8, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_msg_id, 10, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_type, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        buffer.write_i64(self.last_px)
        buffer.write_i64(self.last_qty)
        buffer.write_i64(self.leaves_qty)
        buffer.write_i64(self.cum_qty)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.account_id, 12, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 4, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32()
        self.report_index = buffer.read_i64()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64()
        self.user_info = get_fixed_string(buffer, 8, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_msg_id = get_fixed_string(buffer, 10, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_type = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.last_px = buffer.read_i64()
        self.last_qty = buffer.read_i64()
        self.leaves_qty = buffer.read_i64()
        self.cum_qty = buffer.read_i64()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.account_id = get_fixed_string(buffer, 12, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 4, 'utf-8')
        self.appl_extend = executionReportMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.order_id == other.order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.quote_msg_id == other.quote_msg_id,
            self.exec_id == other.exec_id,
            self.exec_type == other.exec_type,
            self.ord_status == other.ord_status,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.leaves_qty == other.leaves_qty,
            self.cum_qty == other.cum_qty,
            self.side == other.side,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.appl_extend == other.appl_extend
        ])
        
    








class Extend200415(BinaryCodec):
    def __init__(self):
        self.position_effect = ''
        self.covered_or_uncovered = 0
        self.contract_account_code = ''
        self.secondary_order_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.position_effect, 1, 'utf-8')
        buffer.write_u8(self.covered_or_uncovered)
        write_fixed_string(buffer, self.contract_account_code, 6, 'utf-8')
        write_fixed_string(buffer, self.secondary_order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.position_effect = get_fixed_string(buffer, 1, 'utf-8')
        self.covered_or_uncovered = buffer.read_u8()
        self.contract_account_code = get_fixed_string(buffer, 6, 'utf-8')
        self.secondary_order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.position_effect == other.position_effect,
            self.covered_or_uncovered == other.covered_or_uncovered,
            self.contract_account_code == other.contract_account_code,
            self.secondary_order_id == other.secondary_order_id
        ])
        
    


















class OrderCancelRequest(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.side = ''
        self.order_id = ''
        self.order_qty = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        buffer.write_i64(self.order_qty)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64()
        self.user_info = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.order_qty = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.side == other.side,
            self.order_id == other.order_id,
            self.order_qty == other.order_qty
        ])
        
    


class CancelReject(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.side = ''
        self.ord_status = ''
        self.cxl_rej_reason = 0
        self.reject_text = ''
        self.order_id = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.partition_no)
        buffer.write_i64(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        buffer.write_u16(self.cxl_rej_reason)
        write_fixed_string(buffer, self.reject_text, 16, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32()
        self.report_index = buffer.read_i64()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64()
        self.user_info = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.cxl_rej_reason = buffer.read_u16()
        self.reject_text = get_fixed_string(buffer, 16, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.side == other.side,
            self.ord_status == other.ord_status,
            self.cxl_rej_reason == other.cxl_rej_reason,
            self.reject_text == other.reject_text,
            self.order_id == other.order_id
        ])
        
    


class BusinessReject(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.transact_time = 0
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.ref_seq_num = 0
        self.ref_msg_type = 0
        self.business_reject_ref_id = ''
        self.business_reject_reason = 0
        self.business_reject_text = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        buffer.write_i64(self.transact_time)
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_i64(self.ref_seq_num)
        buffer.write_u32(self.ref_msg_type)
        write_fixed_string(buffer, self.business_reject_ref_id, 10, 'utf-8')
        buffer.write_u16(self.business_reject_reason)
        write_fixed_string(buffer, self.business_reject_text, 50, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.transact_time = buffer.read_i64()
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.ref_seq_num = buffer.read_i64()
        self.ref_msg_type = buffer.read_u32()
        self.business_reject_ref_id = get_fixed_string(buffer, 10, 'utf-8')
        self.business_reject_reason = buffer.read_u16()
        self.business_reject_text = get_fixed_string(buffer, 50, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.transact_time == other.transact_time,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.ref_seq_num == other.ref_seq_num,
            self.ref_msg_type == other.ref_msg_type,
            self.business_reject_ref_id == other.business_reject_ref_id,
            self.business_reject_reason == other.business_reject_reason,
            self.business_reject_text == other.business_reject_text
        ])
        
    


class PartitionReport(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.partition_no)
        buffer.write_i64(self.report_index)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32()
        self.report_index = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index
        ])
        
    

class ReportSynchronization(BinaryCodec):
    def __init__(self):
        self.partition_report = []
    
    def encode(self, buffer: ByteBuf):
        size = len(self.partition_report)
        buffer.write_u32(size)
        for i in range(size):
            self.partition_report[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        size = get_len(buffer, 'u32')
        for i in range(size):
            _partition_report = PartitionReport()
            _partition_report.decode(buffer)
            self.partition_report.append(_partition_report)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_report == other.partition_report
        ])
        
    




class PlatformStateInfo(BinaryCodec):
    def __init__(self):
        self.platform_id = 0
        self.platform_state = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.platform_id)
        buffer.write_u16(self.platform_state)
    
    def decode(self, buffer: ByteBuf):
        self.platform_id = buffer.read_u16()
        self.platform_state = buffer.read_u16()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.platform_id == other.platform_id,
            self.platform_state == other.platform_state
        ])
        
    


class ReportFinished(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.platform_id = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.partition_no)
        buffer.write_i64(self.report_index)
        buffer.write_u16(self.platform_id)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32()
        self.report_index = buffer.read_i64()
        self.platform_id = buffer.read_u16()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.platform_id == other.platform_id
        ])
        
    


class PlatformPartition(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32(self.partition_no)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no
        ])
        
    

class PlatformInfo(BinaryCodec):
    def __init__(self):
        self.platform_id = 0
        self.platform_partition = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.platform_id)
        size = len(self.platform_partition)
        buffer.write_u32(size)
        for i in range(size):
            self.platform_partition[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        self.platform_id = buffer.read_u16()
        size = get_len(buffer, 'u32')
        for i in range(size):
            _platform_partition = PlatformPartition()
            _platform_partition.decode(buffer)
            self.platform_partition.append(_platform_partition)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.platform_id == other.platform_id,
            self.platform_partition == other.platform_partition
        ])
        
    




class TradingSessionStatus(BinaryCodec):
    def __init__(self):
        self.market_id = ''
        self.market_segment_id = ''
        self.trading_session_id = ''
        self.trading_session_sub_id = ''
        self.trad_ses_status = 0
        self.trad_ses_start_time = 0
        self.trad_ses_end_time = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.market_id, 8, 'utf-8')
        write_fixed_string(buffer, self.market_segment_id, 8, 'utf-8')
        write_fixed_string(buffer, self.trading_session_id, 4, 'utf-8')
        write_fixed_string(buffer, self.trading_session_sub_id, 4, 'utf-8')
        buffer.write_u16(self.trad_ses_status)
        buffer.write_i64(self.trad_ses_start_time)
        buffer.write_i64(self.trad_ses_end_time)
    
    def decode(self, buffer: ByteBuf):
        self.market_id = get_fixed_string(buffer, 8, 'utf-8')
        self.market_segment_id = get_fixed_string(buffer, 8, 'utf-8')
        self.trading_session_id = get_fixed_string(buffer, 4, 'utf-8')
        self.trading_session_sub_id = get_fixed_string(buffer, 4, 'utf-8')
        self.trad_ses_status = buffer.read_u16()
        self.trad_ses_start_time = buffer.read_i64()
        self.trad_ses_end_time = buffer.read_i64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.market_id == other.market_id,
            self.market_segment_id == other.market_segment_id,
            self.trading_session_id == other.trading_session_id,
            self.trading_session_sub_id == other.trading_session_sub_id,
            self.trad_ses_status == other.trad_ses_status,
            self.trad_ses_start_time == other.trad_ses_start_time,
            self.trad_ses_end_time == other.trad_ses_end_time
        ])
        
    


class SzseBinaryMessageFactory(MessageFactory[int, BinaryCodec]): ...
szseBinaryMessageFactory = SzseBinaryMessageFactory()
szseBinaryMessageFactory.register(1, Logon)
szseBinaryMessageFactory.register(2, Logout)
szseBinaryMessageFactory.register(3, Heartbeat)
szseBinaryMessageFactory.register(4, BusinessReject)
szseBinaryMessageFactory.register(5, ReportSynchronization)
szseBinaryMessageFactory.register(6, PlatformStateInfo)
szseBinaryMessageFactory.register(7, ReportFinished)
szseBinaryMessageFactory.register(9, PlatformPartition)
szseBinaryMessageFactory.register(10, TradingSessionStatus)
szseBinaryMessageFactory.register(100101, NewOrder)
szseBinaryMessageFactory.register(100201, NewOrder)
szseBinaryMessageFactory.register(100301, NewOrder)
szseBinaryMessageFactory.register(100401, NewOrder)
szseBinaryMessageFactory.register(100501, NewOrder)
szseBinaryMessageFactory.register(100601, NewOrder)
szseBinaryMessageFactory.register(100701, NewOrder)
szseBinaryMessageFactory.register(101201, NewOrder)
szseBinaryMessageFactory.register(101301, NewOrder)
szseBinaryMessageFactory.register(101401, NewOrder)
szseBinaryMessageFactory.register(101501, NewOrder)
szseBinaryMessageFactory.register(101601, NewOrder)
szseBinaryMessageFactory.register(101701, NewOrder)
szseBinaryMessageFactory.register(101801, NewOrder)
szseBinaryMessageFactory.register(101901, NewOrder)
szseBinaryMessageFactory.register(102301, NewOrder)
szseBinaryMessageFactory.register(102701, NewOrder)
szseBinaryMessageFactory.register(102801, NewOrder)
szseBinaryMessageFactory.register(102901, NewOrder)
szseBinaryMessageFactory.register(103101, NewOrder)
szseBinaryMessageFactory.register(106301, NewOrder)
szseBinaryMessageFactory.register(103301, NewOrder)
szseBinaryMessageFactory.register(103501, NewOrder)
szseBinaryMessageFactory.register(103701, NewOrder)
szseBinaryMessageFactory.register(104101, NewOrder)
szseBinaryMessageFactory.register(104128, NewOrder)
szseBinaryMessageFactory.register(104701, NewOrder)
szseBinaryMessageFactory.register(200102, ExecutionConfirm)
szseBinaryMessageFactory.register(200202, ExecutionConfirm)
szseBinaryMessageFactory.register(200302, ExecutionConfirm)
szseBinaryMessageFactory.register(200402, ExecutionConfirm)
szseBinaryMessageFactory.register(200502, ExecutionConfirm)
szseBinaryMessageFactory.register(200602, ExecutionConfirm)
szseBinaryMessageFactory.register(200702, ExecutionConfirm)
szseBinaryMessageFactory.register(201202, ExecutionConfirm)
szseBinaryMessageFactory.register(201302, ExecutionConfirm)
szseBinaryMessageFactory.register(201402, ExecutionConfirm)
szseBinaryMessageFactory.register(201502, ExecutionConfirm)
szseBinaryMessageFactory.register(201602, ExecutionConfirm)
szseBinaryMessageFactory.register(201702, ExecutionConfirm)
szseBinaryMessageFactory.register(201802, ExecutionConfirm)
szseBinaryMessageFactory.register(201902, ExecutionConfirm)
szseBinaryMessageFactory.register(202202, ExecutionConfirm)
szseBinaryMessageFactory.register(202302, ExecutionConfirm)
szseBinaryMessageFactory.register(202702, ExecutionConfirm)
szseBinaryMessageFactory.register(202802, ExecutionConfirm)
szseBinaryMessageFactory.register(202902, ExecutionConfirm)
szseBinaryMessageFactory.register(203102, ExecutionConfirm)
szseBinaryMessageFactory.register(206302, ExecutionConfirm)
szseBinaryMessageFactory.register(203302, ExecutionConfirm)
szseBinaryMessageFactory.register(203502, ExecutionConfirm)
szseBinaryMessageFactory.register(203702, ExecutionConfirm)
szseBinaryMessageFactory.register(204102, ExecutionConfirm)
szseBinaryMessageFactory.register(204129, ExecutionConfirm)
szseBinaryMessageFactory.register(204702, ExecutionConfirm)
szseBinaryMessageFactory.register(200115, ExecutionReport)
szseBinaryMessageFactory.register(200215, ExecutionReport)
szseBinaryMessageFactory.register(200315, ExecutionReport)
szseBinaryMessageFactory.register(200415, ExecutionReport)
szseBinaryMessageFactory.register(200515, ExecutionReport)
szseBinaryMessageFactory.register(200615, ExecutionReport)
szseBinaryMessageFactory.register(200715, ExecutionReport)
szseBinaryMessageFactory.register(206315, ExecutionReport)
szseBinaryMessageFactory.register(203715, ExecutionReport)
szseBinaryMessageFactory.register(204115, ExecutionReport)
szseBinaryMessageFactory.register(204130, ExecutionReport)
szseBinaryMessageFactory.register(190007, OrderCancelRequest)
szseBinaryMessageFactory.register(290008, CancelReject)


class SzseBinary(BinaryCodec):
    def __init__(self):
        self.msg_type = 0
        self.body_length = 0
        self.body = None
        self.checksum = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.msg_type)
        body_length_pos = buffer.write_index
        buffer.write_u32(0)
        body_start = buffer.write_index
        self.body.encode(buffer)
        body_end = buffer.write_index
        self.body_length = body_end - body_start
        buffer.write_u32_at(body_length_pos, self.body_length)
        service = create_checksum_service("SZSE_BIN")
        if service :
            self.checksum = service.calc(buffer)
        buffer.write_i32(self.checksum)
    
    def decode(self, buffer: ByteBuf):
        self.msg_type = buffer.read_u32()
        self.body_length = buffer.read_u32()
        self.body = szseBinaryMessageFactory.create(self.msg_type)
        self.body.decode(buffer)
        self.checksum = buffer.read_i32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.msg_type == other.msg_type,
            self.body_length == other.body_length,
            self.body == other.body,
            self.checksum == other.checksum
        ])
        
    


