# Code generated by fin-protoc. DO NOT EDIT.
import unittest

from rc_binary import *

class TestNewOrder(unittest.TestCase):
    def setUp(self):
        self.packet = NewOrder()
        self.packet.cl_ord_id = "hello"
        self.packet.security_id = "hello"
        self.packet.side = "x"
        self.packet.price = 8
        self.packet.order_qty = 8
        self.packet.ord_type = "x"
        self.packet.account = "hello"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = NewOrder()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestOrderConfirm(unittest.TestCase):
    def setUp(self):
        self.packet = OrderConfirm()
        self.packet.cl_ord_id = "hello"
        self.packet.exec_type = "x"
        self.packet.ord_rej_reason = 4
        self.packet.ord_cnfm_id = "hello"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = OrderConfirm()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExecutionReport(unittest.TestCase):
    def setUp(self):
        self.packet = ExecutionReport()
        self.packet.cl_ord_id = "hello"
        self.packet.ord_cnfm_id = "hello"
        self.packet.last_px = 8
        self.packet.last_qty = 8
        self.packet.ord_status = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExecutionReport()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestOrderCancel(unittest.TestCase):
    def setUp(self):
        self.packet = OrderCancel()
        self.packet.cl_ord_id = "hello"
        self.packet.orig_cl_ord_id = "hello"
        self.packet.security_id = "hello"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = OrderCancel()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestCancelReject(unittest.TestCase):
    def setUp(self):
        self.packet = CancelReject()
        self.packet.cl_ord_id = "hello"
        self.packet.orig_cl_ord_id = "hello"
        self.packet.cxl_rej_reason = 4
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = CancelReject()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestRcBinary(unittest.TestCase):
    def setUp(self):
        body = NewOrder()
        body.cl_ord_id = "hello"
        body.security_id = "hello"
        body.side = "x"
        body.price = 8
        body.order_qty = 8
        body.ord_type = "x"
        body.account = "hello"
        self.packet = RcBinary()
        self.packet.version = 4
        self.packet.msg_body_len = 4
        self.packet.msg_type = 100101
        self.packet.body = body
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = RcBinary()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



if __name__ == '__main__':
    unittest.main()
