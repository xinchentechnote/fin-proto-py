# Code generated by fin-protoc. DO NOT EDIT.
from bytebuf import ByteBuf
from codec import BinaryCodec

class RootPacket(BinaryCodec):
    def __init__(self):
        self.msg_type = 0
        self.payload_len = 0
        self.payload = None
        self.checksum = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.msg_type)
        buffer.write_u32_le(self.payload_len)
        if self.payload is not None:
            self.payload.encode(buffer)
        buffer.write_i32_le(self.checksum)
    
    def decode(self, buffer: ByteBuf):
        self.msg_type = buffer.read_u16_le()
        self.payload_len = buffer.read_u32_le()
        if buffer.has_more():
            self.payload.decode(buffer)
        self.checksum = buffer.read_i32_le()
    


class BasicPacket(BinaryCodec):
    def __init__(self):
        self.field_i_8 = 0
        self.field_i_16 = 0
        self.field_i_32 = 0
        self.field_i_64 = 0
        self.field_u_8 = 0
        self.field_u_16 = 0
        self.field_u_32 = 0
        self.field_u_64 = 0
        self.field_f_32 = 0
        self.field_f_64 = 0
        self.field_i_8_list = 0
        self.field_i_16_list = 0
        self.field_i_32_list = 0
        self.field_i_64_list = 0
        self.field_u_8_list = 0
        self.field_u_16_list = 0
        self.field_u_32_list = 0
        self.field_u_64_list = 0
        self.field_f_32_list = 0
        self.field_f_64_list = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i8(self.field_i_8)
        buffer.write_i16_le(self.field_i_16)
        buffer.write_i32_le(self.field_i_32)
        buffer.write_i64_le(self.field_i_64)
        buffer.write_u8(self.field_u_8)
        buffer.write_u16_le(self.field_u_16)
        buffer.write_u32_le(self.field_u_32)
        buffer.write_u64_le(self.field_u_64)
        buffer.write_f32_le(self.field_f_32)
        buffer.write_f64_le(self.field_f_64)
        buffer.write_i8(self.field_i_8_list)
        buffer.write_i16_le(self.field_i_16_list)
        buffer.write_i32_le(self.field_i_32_list)
        buffer.write_i64_le(self.field_i_64_list)
        buffer.write_u8(self.field_u_8_list)
        buffer.write_u16_le(self.field_u_16_list)
        buffer.write_u32_le(self.field_u_32_list)
        buffer.write_u64_le(self.field_u_64_list)
        buffer.write_f32_le(self.field_f_32_list)
        buffer.write_f64_le(self.field_f_64_list)
    
    def decode(self, buffer: ByteBuf):
        self.field_i_8 = buffer.read_i8()
        self.field_i_16 = buffer.read_i16_le()
        self.field_i_32 = buffer.read_i32_le()
        self.field_i_64 = buffer.read_i64_le()
        self.field_u_8 = buffer.read_u8()
        self.field_u_16 = buffer.read_u16_le()
        self.field_u_32 = buffer.read_u32_le()
        self.field_u_64 = buffer.read_u64_le()
        self.field_f_32 = buffer.read_f32_le()
        self.field_f_64 = buffer.read_f64_le()
        self.field_i_8_list = buffer.read_i8()
        self.field_i_16_list = buffer.read_i16_le()
        self.field_i_32_list = buffer.read_i32_le()
        self.field_i_64_list = buffer.read_i64_le()
        self.field_u_8_list = buffer.read_u8()
        self.field_u_16_list = buffer.read_u16_le()
        self.field_u_32_list = buffer.read_u32_le()
        self.field_u_64_list = buffer.read_u64_le()
        self.field_f_32_list = buffer.read_f32_le()
        self.field_f_64_list = buffer.read_f64_le()
    


class StringPacket(BinaryCodec):
    def __init__(self):
        self.field_dynamic_string = ''
        self.field_dynamic_string_1 = ''
        self.field_fixed_string_1 = []
        self.field_fixed_string_10 = []
        self.field_dynamic_string_list = ''
        self.field_dynamic_string_1_list = ''
        self.field_fixed_string_1_list = []
        self.field_fixed_string_10_list = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_string(self.field_dynamic_string)
        buffer.write_string(self.field_dynamic_string_1)
        buffer.write_char_array(self.field_fixed_string_1)
        buffer.write_char_array(self.field_fixed_string_10)
        buffer.write_string(self.field_dynamic_string_list)
        buffer.write_string(self.field_dynamic_string_1_list)
        buffer.write_char_array(self.field_fixed_string_1_list)
        buffer.write_char_array(self.field_fixed_string_10_list)
    
    def decode(self, buffer: ByteBuf):
        self.field_dynamic_string = buffer.read_string()
        self.field_dynamic_string_1 = buffer.read_string()
        self.field_fixed_string_1 = buffer.read_char_array()
        self.field_fixed_string_10 = buffer.read_char_array()
        self.field_dynamic_string_list = buffer.read_string()
        self.field_dynamic_string_1_list = buffer.read_string()
        self.field_fixed_string_1_list = buffer.read_char_array()
        self.field_fixed_string_10_list = buffer.read_char_array()
    


class InerPacket(BinaryCodec):
    def __init__(self):
        self.field_u_32 = 0
        self.field_i_16_list = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32_le(self.field_u_32)
        buffer.write_i16_le(self.field_i_16_list)
    
    def decode(self, buffer: ByteBuf):
        self.field_u_32 = buffer.read_u32_le()
        self.field_i_16_list = buffer.read_i16_le()
    
class NestedPacket(BinaryCodec):
    def __init__(self):
        self.sub_packet = None
        self.sub_packet_list = None
        self.iner_packet = None
    
    def encode(self, buffer: ByteBuf):
        self.sub_packet.encode(buffer)
        self.sub_packet_list.encode(buffer)
        self.iner_packet.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.sub_packet = SubPacket()
        self.sub_packet.decode(buffer)
        self.sub_packet_list = SubPacket()
        self.sub_packet_list.decode(buffer)
        self.iner_packet = InerPacket()
        self.iner_packet.decode(buffer)
    


class SubPacket(BinaryCodec):
    def __init__(self):
        self.field_u_32 = 0
        self.field_i_16_list = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32_le(self.field_u_32)
        buffer.write_i16_le(self.field_i_16_list)
    
    def decode(self, buffer: ByteBuf):
        self.field_u_32 = buffer.read_u32_le()
        self.field_i_16_list = buffer.read_i16_le()
    


class EmptyPacket(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    


