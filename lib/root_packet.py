# Code generated by fin-protoc. DO NOT EDIT.
from bytebuf import ByteBuf
from checksum import create_checksum_service
from message_factory import MessageFactory
from codec import *

class BasicPacket(BinaryCodec):
    def __init__(self):
        self.field_i_8 = 0
        self.field_i_16 = 0
        self.field_i_32 = 0
        self.field_i_64 = 0
        self.field_char = ''
        self.field_u_8 = 0
        self.field_u_16 = 0
        self.field_u_32 = 0
        self.field_u_64 = 0
        self.field_f_32 = 0
        self.field_f_64 = 0
        self.field_i_8_list = []
        self.field_i_16_list = []
        self.field_i_32_list = []
        self.field_i_64_list = []
        self.field_char_list = []
        self.field_u_8_list = []
        self.field_u_16_list = []
        self.field_u_32_list = []
        self.field_u_64_list = []
        self.field_f_32_list = []
        self.field_f_64_list = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i8(self.field_i_8)
        buffer.write_i16_le(self.field_i_16)
        buffer.write_i32_le(self.field_i_32)
        buffer.write_i64_le(self.field_i_64)
        write_fixed_string(buffer, self.field_char, 1)
        buffer.write_u8(self.field_u_8)
        buffer.write_u16_le(self.field_u_16)
        buffer.write_u32_le(self.field_u_32)
        buffer.write_u64_le(self.field_u_64)
        buffer.write_f32_le(self.field_f_32)
        buffer.write_f64_le(self.field_f_64)
        size = len(self.field_i_8_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_i8(self.field_i_8_list[i])
        
        size = len(self.field_i_16_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_i16_le(self.field_i_16_list[i])
        
        size = len(self.field_i_32_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_i32_le(self.field_i_32_list[i])
        
        size = len(self.field_i_64_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_i64_le(self.field_i_64_list[i])
        
        size = len(self.field_char_list)
        buffer.write_u16_le(size)
        for i in range(size):
            write_fixed_string(buffer, self.field_char_list[i], 1)
        
        size = len(self.field_u_8_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_u8(self.field_u_8_list[i])
        
        size = len(self.field_u_16_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_u16_le(self.field_u_16_list[i])
        
        size = len(self.field_u_32_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_u32_le(self.field_u_32_list[i])
        
        size = len(self.field_u_64_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_u64_le(self.field_u_64_list[i])
        
        size = len(self.field_f_32_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_f32_le(self.field_f_32_list[i])
        
        size = len(self.field_f_64_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_f64_le(self.field_f_64_list[i])
        
    
    def decode(self, buffer: ByteBuf):
        self.field_i_8 = buffer.read_i8()
        self.field_i_16 = buffer.read_i16_le()
        self.field_i_32 = buffer.read_i32_le()
        self.field_i_64 = buffer.read_i64_le()
        self.field_char = buffer.read_bytes(1).decode('utf-8').strip('\x00')
        self.field_u_8 = buffer.read_u8()
        self.field_u_16 = buffer.read_u16_le()
        self.field_u_32 = buffer.read_u32_le()
        self.field_u_64 = buffer.read_u64_le()
        self.field_f_32 = buffer.read_f32_le()
        self.field_f_64 = buffer.read_f64_le()
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_i_8_list.append(buffer.read_i8())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_i_16_list.append(buffer.read_i16_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_i_32_list.append(buffer.read_i32_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_i_64_list.append(buffer.read_i64_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_char_list.append(buffer.read_bytes(1).decode('utf-8').strip('\x00'))
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_u_8_list.append(buffer.read_u8())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_u_16_list.append(buffer.read_u16_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_u_32_list.append(buffer.read_u32_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_u_64_list.append(buffer.read_u64_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_f_32_list.append(buffer.read_f32_le())
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_f_64_list.append(buffer.read_f64_le())
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.field_i_8 == other.field_i_8,
            self.field_i_16 == other.field_i_16,
            self.field_i_32 == other.field_i_32,
            self.field_i_64 == other.field_i_64,
            self.field_char == other.field_char,
            self.field_u_8 == other.field_u_8,
            self.field_u_16 == other.field_u_16,
            self.field_u_32 == other.field_u_32,
            self.field_u_64 == other.field_u_64,
            self.field_f_32 == other.field_f_32,
            self.field_f_64 == other.field_f_64,
            self.field_i_8_list == other.field_i_8_list,
            self.field_i_16_list == other.field_i_16_list,
            self.field_i_32_list == other.field_i_32_list,
            self.field_i_64_list == other.field_i_64_list,
            self.field_char_list == other.field_char_list,
            self.field_u_8_list == other.field_u_8_list,
            self.field_u_16_list == other.field_u_16_list,
            self.field_u_32_list == other.field_u_32_list,
            self.field_u_64_list == other.field_u_64_list,
            self.field_f_32_list == other.field_f_32_list,
            self.field_f_64_list == other.field_f_64_list
        ])
        
    


class StringPacket(BinaryCodec):
    def __init__(self):
        self.field_dynamic_string = ''
        self.field_dynamic_string_1 = ''
        self.field_fixed_string_1 = ''
        self.field_fixed_string_10 = ''
        self.field_fixed_string_10_pad = ''
        self.field_dynamic_string_list = []
        self.field_dynamic_string_1_list = []
        self.field_fixed_string_1_list = []
        self.field_fixed_string_10_list = []
        self.field_fixed_string_10_list_pad = []
    
    def encode(self, buffer: ByteBuf):
        put_string_le(buffer, self.field_dynamic_string, 'u16')
        put_string_le(buffer, self.field_dynamic_string_1, 'u16')
        write_fixed_string(buffer, self.field_fixed_string_1, 1)
        write_fixed_string(buffer, self.field_fixed_string_10, 10)
        write_fixed_string(buffer, self.field_fixed_string_10_pad, 10)
        size = len(self.field_dynamic_string_list)
        buffer.write_u16_le(size)
        for i in range(size):
            put_string_le(buffer, self.field_dynamic_string_list[i], 'u16')
        
        size = len(self.field_dynamic_string_1_list)
        buffer.write_u16_le(size)
        for i in range(size):
            put_string_le(buffer, self.field_dynamic_string_1_list[i], 'u16')
        
        size = len(self.field_fixed_string_1_list)
        buffer.write_u16_le(size)
        for i in range(size):
            write_fixed_string(buffer, self.field_fixed_string_1_list[i], 1)
        
        size = len(self.field_fixed_string_10_list)
        buffer.write_u16_le(size)
        for i in range(size):
            write_fixed_string(buffer, self.field_fixed_string_10_list[i], 10)
        
        size = len(self.field_fixed_string_10_list_pad)
        buffer.write_u16_le(size)
        for i in range(size):
            write_fixed_string(buffer, self.field_fixed_string_10_list_pad[i], 10)
        
    
    def decode(self, buffer: ByteBuf):
        self.field_dynamic_string = get_string_le(buffer,'u16')
        self.field_dynamic_string_1 = get_string_le(buffer,'u16')
        self.field_fixed_string_1 = buffer.read_bytes(1).decode('utf-8').strip('\x00')
        self.field_fixed_string_10 = buffer.read_bytes(10).decode('utf-8').strip('\x00')
        self.field_fixed_string_10_pad = buffer.read_bytes(10).decode('utf-8').strip('\x00')
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_dynamic_string_list.append(get_string_le(buffer,'u16'))
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_dynamic_string_1_list.append(get_string_le(buffer,'u16'))
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_fixed_string_1_list.append(buffer.read_bytes(1).decode('utf-8').strip('\x00'))
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_fixed_string_10_list.append(buffer.read_bytes(10).decode('utf-8').strip('\x00'))
        
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_fixed_string_10_list_pad.append(buffer.read_bytes(10).decode('utf-8').strip('\x00'))
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.field_dynamic_string == other.field_dynamic_string,
            self.field_dynamic_string_1 == other.field_dynamic_string_1,
            self.field_fixed_string_1 == other.field_fixed_string_1,
            self.field_fixed_string_10 == other.field_fixed_string_10,
            self.field_fixed_string_10_pad == other.field_fixed_string_10_pad,
            self.field_dynamic_string_list == other.field_dynamic_string_list,
            self.field_dynamic_string_1_list == other.field_dynamic_string_1_list,
            self.field_fixed_string_1_list == other.field_fixed_string_1_list,
            self.field_fixed_string_10_list == other.field_fixed_string_10_list,
            self.field_fixed_string_10_list_pad == other.field_fixed_string_10_list_pad
        ])
        
    


class SubPacket(BinaryCodec):
    def __init__(self):
        self.field_u_32 = 0
        self.field_i_16_list = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32_le(self.field_u_32)
        size = len(self.field_i_16_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_i16_le(self.field_i_16_list[i])
        
    
    def decode(self, buffer: ByteBuf):
        self.field_u_32 = buffer.read_u32_le()
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_i_16_list.append(buffer.read_i16_le())
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.field_u_32 == other.field_u_32,
            self.field_i_16_list == other.field_i_16_list
        ])
        
    


class InerPacket(BinaryCodec):
    def __init__(self):
        self.field_u_32 = 0
        self.field_i_16_list = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32_le(self.field_u_32)
        size = len(self.field_i_16_list)
        buffer.write_u16_le(size)
        for i in range(size):
            buffer.write_i16_le(self.field_i_16_list[i])
        
    
    def decode(self, buffer: ByteBuf):
        self.field_u_32 = buffer.read_u32_le()
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            self.field_i_16_list.append(buffer.read_i16_le())
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.field_u_32 == other.field_u_32,
            self.field_i_16_list == other.field_i_16_list
        ])
        
    

class NestedPacket(BinaryCodec):
    def __init__(self):
        self.sub_packet = None
        self.sub_packet_list = []
        self.iner_packet = None
    
    def encode(self, buffer: ByteBuf):
        self.sub_packet.encode(buffer)
        size = len(self.sub_packet_list)
        buffer.write_u16_le(size)
        for i in range(size):
            self.sub_packet_list[i].encode(buffer)
        
        self.iner_packet.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.sub_packet = SubPacket()
        self.sub_packet.decode(buffer)
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            _sub_packet = SubPacket()
            _sub_packet.decode(buffer)
            self.sub_packet_list.append(_sub_packet)
        
        self.iner_packet = InerPacket()
        self.iner_packet.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.sub_packet == other.sub_packet,
            self.sub_packet_list == other.sub_packet_list,
            self.iner_packet == other.iner_packet
        ])
        
    




class EmptyPacket(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    


class RootPacketMessageFactory(MessageFactory[int, BinaryCodec]): ...
rootPacketMessageFactory = RootPacketMessageFactory()
rootPacketMessageFactory.register(1, BasicPacket)
rootPacketMessageFactory.register(2, StringPacket)
rootPacketMessageFactory.register(3, NestedPacket)
rootPacketMessageFactory.register(4, EmptyPacket)


class RootPacket(BinaryCodec):
    def __init__(self):
        self.msg_type = 0
        self.payload_len = 0
        self.payload = None
        self.checksum = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.msg_type)
        payload_len_pos = buffer.write_index
        buffer.write_u32_le(0)
        payload_start = buffer.write_index
        self.payload.encode(buffer)
        payload_end = buffer.write_index
        self.payload_len = payload_end - payload_start
        buffer.write_u32_le_at(payload_len_pos, self.payload_len)
        service = create_checksum_service("CRC32")
        if service :
            self.checksum = service.calc(buffer)
        buffer.write_u32_le(self.checksum)
    
    def decode(self, buffer: ByteBuf):
        self.msg_type = buffer.read_u16_le()
        self.payload_len = buffer.read_u32_le()
        self.payload = rootPacketMessageFactory.create(self.msg_type)
        self.payload.decode(buffer)
        self.checksum = buffer.read_u32_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.msg_type == other.msg_type,
            self.payload_len == other.payload_len,
            self.payload == other.payload,
            self.checksum == other.checksum
        ])
        
    


