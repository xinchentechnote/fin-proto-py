# Code generated by fin-protoc. DO NOT EDIT.
from bytebuf import ByteBuf
from checksum import create_checksum_service
from message_factory import MessageFactory
from codec import *

class Logon(BinaryCodec):
    def __init__(self):
        self.sender_comp_id = ''
        self.target_comp_id = ''
        self.heart_bt_int = 0
        self.password = ''
        self.default_appl_ver_id = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.sender_comp_id, 20, 'utf-8')
        write_fixed_string(buffer, self.target_comp_id, 20, 'utf-8')
        buffer.write_i32_le(self.heart_bt_int)
        write_fixed_string(buffer, self.password, 16, 'utf-8')
        write_fixed_string(buffer, self.default_appl_ver_id, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.sender_comp_id = get_fixed_string(buffer, 20, 'utf-8')
        self.target_comp_id = get_fixed_string(buffer, 20, 'utf-8')
        self.heart_bt_int = buffer.read_i32_le()
        self.password = get_fixed_string(buffer, 16, 'utf-8')
        self.default_appl_ver_id = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.sender_comp_id == other.sender_comp_id,
            self.target_comp_id == other.target_comp_id,
            self.heart_bt_int == other.heart_bt_int,
            self.password == other.password,
            self.default_appl_ver_id == other.default_appl_ver_id
        ])
        
    


class Logout(BinaryCodec):
    def __init__(self):
        self.session_status = 0
        self.text = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.session_status)
        write_fixed_string(buffer, self.text, 200, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.session_status = buffer.read_i32_le()
        self.text = get_fixed_string(buffer, 200, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.session_status == other.session_status,
            self.text == other.text
        ])
        
    


class Heartbeat(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    


class ExtendNewOrder010(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
        self.settl_type = ''
        self.settl_period = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64_le(self.stop_px)
        buffer.write_i64_le(self.min_qty)
        buffer.write_u16_le(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_type, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_period, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64_le()
        self.min_qty = buffer.read_i64_le()
        self.max_price_levels = buffer.read_u16_le()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_type = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_period = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period
        ])
        
    

class ExtendNewOrder040(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64_le(self.stop_px)
        buffer.write_i64_le(self.min_qty)
        buffer.write_u16_le(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64_le()
        self.min_qty = buffer.read_i64_le()
        self.max_price_levels = buffer.read_u16_le()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class ExtendNewOrder041(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ExtendNewOrder042(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ExtendNewOrder043(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ExtendNewOrder044(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ExtendNewOrder045(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ExtendNewOrder050(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16_le()
        self.expiration_type = buffer.read_u8()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.share_property == other.share_property
        ])
        
    

class NewOrderMessageFactory(MessageFactory[str, BinaryCodec]): ...
newOrderMessageFactory = NewOrderMessageFactory()
newOrderMessageFactory.register("010", ExtendNewOrder010)
newOrderMessageFactory.register("040", ExtendNewOrder040)
newOrderMessageFactory.register("041", ExtendNewOrder041)
newOrderMessageFactory.register("042", ExtendNewOrder042)
newOrderMessageFactory.register("043", ExtendNewOrder043)
newOrderMessageFactory.register("044", ExtendNewOrder044)
newOrderMessageFactory.register("045", ExtendNewOrder045)
newOrderMessageFactory.register("050", ExtendNewOrder050)


class NewOrder(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.account_id = ''
        self.branch_id = ''
        self.order_restrictions = ''
        self.side = ''
        self.ord_type = ''
        self.order_qty = 0
        self.price = 0
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.order_restrictions, 4, 'utf-8')
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_type, 1, 'utf-8')
        buffer.write_i64_le(self.order_qty)
        buffer.write_i64_le(self.price)
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.order_restrictions = get_fixed_string(buffer, 4, 'utf-8')
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_type = get_fixed_string(buffer, 1, 'utf-8')
        self.order_qty = buffer.read_i64_le()
        self.price = buffer.read_i64_le()
        self.appl_extend = newOrderMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.order_restrictions == other.order_restrictions,
            self.side == other.side,
            self.ord_type == other.ord_type,
            self.order_qty == other.order_qty,
            self.price == other.price,
            self.appl_extend == other.appl_extend
        ])
        
    


















class OrderCancelRequest(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.account_id = ''
        self.branch_id = ''
        self.order_id = ''
        self.order_qty = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        buffer.write_i64_le(self.order_qty)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.order_qty = buffer.read_i64_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.order_id == other.order_id,
            self.order_qty == other.order_qty
        ])
        
    


class CancelReject(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.account_id = ''
        self.branch_id = ''
        self.ord_status = ''
        self.cxl_rej_reason = 0
        self.reject_text = ''
        self.order_id = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        buffer.write_u16_le(self.cxl_rej_reason)
        write_fixed_string(buffer, self.reject_text, 16, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.cxl_rej_reason = buffer.read_u16_le()
        self.reject_text = get_fixed_string(buffer, 16, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.ord_status == other.ord_status,
            self.cxl_rej_reason == other.cxl_rej_reason,
            self.reject_text == other.reject_text,
            self.order_id == other.order_id
        ])
        
    


class ConfirmExtend010(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64_le(self.stop_px)
        buffer.write_i64_le(self.min_qty)
        buffer.write_u16_le(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64_le()
        self.min_qty = buffer.read_i64_le()
        self.max_price_levels = buffer.read_u16_le()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class ConfirmExtend040(BinaryCodec):
    def __init__(self):
        self.stop_px = 0
        self.min_qty = 0
        self.max_price_levels = 0
        self.time_in_force = ''
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i64_le(self.stop_px)
        buffer.write_i64_le(self.min_qty)
        buffer.write_u16_le(self.max_price_levels)
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.stop_px = buffer.read_i64_le()
        self.min_qty = buffer.read_i64_le()
        self.max_price_levels = buffer.read_u16_le()
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.stop_px == other.stop_px,
            self.min_qty == other.min_qty,
            self.max_price_levels == other.max_price_levels,
            self.time_in_force == other.time_in_force,
            self.cash_margin == other.cash_margin
        ])
        
    

class ConfirmExtend041(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ConfirmExtend042(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ConfirmExtend043(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ConfirmExtend044(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ConfirmExtend045(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class ConfirmExtend050(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16_le()
        self.expiration_type = buffer.read_u8()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.share_property == other.share_property
        ])
        
    

class ExecutionConfirmMessageFactory(MessageFactory[str, BinaryCodec]): ...
executionConfirmMessageFactory = ExecutionConfirmMessageFactory()
executionConfirmMessageFactory.register("010", ConfirmExtend010)
executionConfirmMessageFactory.register("040", ConfirmExtend040)
executionConfirmMessageFactory.register("041", ConfirmExtend041)
executionConfirmMessageFactory.register("042", ConfirmExtend042)
executionConfirmMessageFactory.register("043", ConfirmExtend043)
executionConfirmMessageFactory.register("044", ConfirmExtend044)
executionConfirmMessageFactory.register("045", ConfirmExtend045)
executionConfirmMessageFactory.register("050", ConfirmExtend050)


class ExecutionConfirm(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.order_id = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.exec_id = ''
        self.exec_type = ''
        self.ord_status = ''
        self.ord_rej_reason = 0
        self.leaves_qty = 0
        self.cum_qty = 0
        self.side = ''
        self.ord_type = ''
        self.order_qty = 0
        self.price = 0
        self.account_id = ''
        self.branch_id = ''
        self.order_restrictions = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_type, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        buffer.write_u16_le(self.ord_rej_reason)
        buffer.write_i64_le(self.leaves_qty)
        buffer.write_i64_le(self.cum_qty)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_type, 1, 'utf-8')
        buffer.write_i64_le(self.order_qty)
        buffer.write_i64_le(self.price)
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.order_restrictions, 4, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_type = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_rej_reason = buffer.read_u16_le()
        self.leaves_qty = buffer.read_i64_le()
        self.cum_qty = buffer.read_i64_le()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_type = get_fixed_string(buffer, 1, 'utf-8')
        self.order_qty = buffer.read_i64_le()
        self.price = buffer.read_i64_le()
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.order_restrictions = get_fixed_string(buffer, 4, 'utf-8')
        self.appl_extend = executionConfirmMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.order_id == other.order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.exec_id == other.exec_id,
            self.exec_type == other.exec_type,
            self.ord_status == other.ord_status,
            self.ord_rej_reason == other.ord_rej_reason,
            self.leaves_qty == other.leaves_qty,
            self.cum_qty == other.cum_qty,
            self.side == other.side,
            self.ord_type == other.ord_type,
            self.order_qty == other.order_qty,
            self.price == other.price,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.order_restrictions == other.order_restrictions,
            self.appl_extend == other.appl_extend
        ])
        
    


















class ReportExtend010(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
        self.settl_type = ''
        self.settl_period = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_type, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_period, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_type = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_period = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period
        ])
        
    

class ReportExtend040(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class ReportExtend050(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.maturity_date = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        buffer.write_u32_le(self.maturity_date)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16_le()
        self.expiration_type = buffer.read_u8()
        self.maturity_date = buffer.read_u32_le()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.maturity_date == other.maturity_date,
            self.share_property == other.share_property
        ])
        
    

class ExecutionReportMessageFactory(MessageFactory[str, BinaryCodec]): ...
executionReportMessageFactory = ExecutionReportMessageFactory()
executionReportMessageFactory.register("010", ReportExtend010)
executionReportMessageFactory.register("040", ReportExtend040)
executionReportMessageFactory.register("050", ReportExtend050)


class ExecutionReport(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.order_id = ''
        self.cl_ord_id = ''
        self.exec_id = ''
        self.exec_type = ''
        self.ord_status = ''
        self.last_px = 0
        self.last_qty = 0
        self.leaves_qty = 0
        self.cum_qty = 0
        self.side = ''
        self.account_id = ''
        self.branch_id = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_type, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        buffer.write_i64_le(self.last_px)
        buffer.write_i64_le(self.last_qty)
        buffer.write_i64_le(self.leaves_qty)
        buffer.write_i64_le(self.cum_qty)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_type = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.last_px = buffer.read_i64_le()
        self.last_qty = buffer.read_i64_le()
        self.leaves_qty = buffer.read_i64_le()
        self.cum_qty = buffer.read_i64_le()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.appl_extend = executionReportMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.order_id == other.order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.exec_id == other.exec_id,
            self.exec_type == other.exec_type,
            self.ord_status == other.ord_status,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.leaves_qty == other.leaves_qty,
            self.cum_qty == other.cum_qty,
            self.side == other.side,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.appl_extend == other.appl_extend
        ])
        
    








class QuoteExtend070(BinaryCodec):
    def __init__(self):
        self.branch_id = ''
        self.quote_id = ''
        self.quote_resp_id = ''
        self.private_quote = 0
        self.valid_until_time = 0
        self.price_type = 0
        self.cash_margin = ''
        self.counter_party_pbuid = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.quote_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_resp_id, 10, 'utf-8')
        buffer.write_u8(self.private_quote)
        buffer.write_i64_le(self.valid_until_time)
        buffer.write_u8(self.price_type)
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.counter_party_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.memo, 120, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.quote_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_resp_id = get_fixed_string(buffer, 10, 'utf-8')
        self.private_quote = buffer.read_u8()
        self.valid_until_time = buffer.read_i64_le()
        self.price_type = buffer.read_u8()
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.counter_party_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.memo = get_fixed_string(buffer, 120, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.branch_id == other.branch_id,
            self.quote_id == other.quote_id,
            self.quote_resp_id == other.quote_resp_id,
            self.private_quote == other.private_quote,
            self.valid_until_time == other.valid_until_time,
            self.price_type == other.price_type,
            self.cash_margin == other.cash_margin,
            self.counter_party_pbuid == other.counter_party_pbuid,
            self.memo == other.memo
        ])
        
    

class QuoteExtend071(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class QuoteMessageFactory(MessageFactory[str, BinaryCodec]): ...
quoteMessageFactory = QuoteMessageFactory()
quoteMessageFactory.register("070", QuoteExtend070)
quoteMessageFactory.register("071", QuoteExtend071)


class Quote(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.quote_msg_id = ''
        self.account_id = ''
        self.quote_req_id = ''
        self.quote_type = 0
        self.bid_px = 0
        self.offer_px = 0
        self.bid_size = 0
        self.offer_size = 0
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.quote_msg_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_req_id, 10, 'utf-8')
        buffer.write_u8(self.quote_type)
        buffer.write_i64_le(self.bid_px)
        buffer.write_i64_le(self.offer_px)
        buffer.write_i64_le(self.bid_size)
        buffer.write_i64_le(self.offer_size)
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.quote_msg_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_req_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_type = buffer.read_u8()
        self.bid_px = buffer.read_i64_le()
        self.offer_px = buffer.read_i64_le()
        self.bid_size = buffer.read_i64_le()
        self.offer_size = buffer.read_i64_le()
        self.appl_extend = quoteMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.quote_msg_id == other.quote_msg_id,
            self.account_id == other.account_id,
            self.quote_req_id == other.quote_req_id,
            self.quote_type == other.quote_type,
            self.bid_px == other.bid_px,
            self.offer_px == other.offer_px,
            self.bid_size == other.bid_size,
            self.offer_size == other.offer_size,
            self.appl_extend == other.appl_extend
        ])
        
    






class Quote1(BinaryCodec):
    def __init__(self):
        self.quote_id = ''
        self.quote_price = 0
        self.quote_qty = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.quote_id, 10, 'utf-8')
        buffer.write_i64_le(self.quote_price)
        buffer.write_i64_le(self.quote_qty)
    
    def decode(self, buffer: ByteBuf):
        self.quote_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_price = buffer.read_i64_le()
        self.quote_qty = buffer.read_i64_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.quote_id == other.quote_id,
            self.quote_price == other.quote_price,
            self.quote_qty == other.quote_qty
        ])
        
    

class QuoteStatusReportExtend070(BinaryCodec):
    def __init__(self):
        self.branch_id = ''
        self.order_id = ''
        self.exec_id = ''
        self.quote_resp_id = ''
        self.private_quote = 0
        self.side = ''
        self.price_type = 0
        self.valid_until_time = 0
        self.cash_margin = ''
        self.counter_party_pbuid = ''
        self.memo = ''
        self.quote_1 = []
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.quote_resp_id, 10, 'utf-8')
        buffer.write_u8(self.private_quote)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        buffer.write_u8(self.price_type)
        buffer.write_i64_le(self.valid_until_time)
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.counter_party_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.memo, 120, 'utf-8')
        size = len(self.quote_1)
        buffer.write_u16_le(size)
        for i in range(size):
            self.quote_1[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.quote_resp_id = get_fixed_string(buffer, 10, 'utf-8')
        self.private_quote = buffer.read_u8()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.price_type = buffer.read_u8()
        self.valid_until_time = buffer.read_i64_le()
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.counter_party_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.memo = get_fixed_string(buffer, 120, 'utf-8')
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            _quote_1 = Quote1()
            _quote_1.decode(buffer)
            self.quote_1.append(_quote_1)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.branch_id == other.branch_id,
            self.order_id == other.order_id,
            self.exec_id == other.exec_id,
            self.quote_resp_id == other.quote_resp_id,
            self.private_quote == other.private_quote,
            self.side == other.side,
            self.price_type == other.price_type,
            self.valid_until_time == other.valid_until_time,
            self.cash_margin == other.cash_margin,
            self.counter_party_pbuid == other.counter_party_pbuid,
            self.memo == other.memo,
            self.quote_1 == other.quote_1
        ])
        
    

class QuoteStatusReportMessageFactory(MessageFactory[str, BinaryCodec]): ...
quoteStatusReportMessageFactory = QuoteStatusReportMessageFactory()
quoteStatusReportMessageFactory.register("070", QuoteStatusReportExtend070)


class QuoteStatusReport(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.quote_msg_id = ''
        self.account_id = ''
        self.quote_req_id = ''
        self.quote_rject_reason = 0
        self.quote_type = 0
        self.bid_px = 0
        self.offer_px = 0
        self.bid_size = 0
        self.offer_size = 0
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.quote_msg_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_req_id, 10, 'utf-8')
        buffer.write_u64_le(self.quote_rject_reason)
        buffer.write_u8(self.quote_type)
        buffer.write_i64_le(self.bid_px)
        buffer.write_i64_le(self.offer_px)
        buffer.write_i64_le(self.bid_size)
        buffer.write_i64_le(self.offer_size)
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.quote_msg_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_req_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_rject_reason = buffer.read_u64_le()
        self.quote_type = buffer.read_u8()
        self.bid_px = buffer.read_i64_le()
        self.offer_px = buffer.read_i64_le()
        self.bid_size = buffer.read_i64_le()
        self.offer_size = buffer.read_i64_le()
        self.appl_extend = quoteStatusReportMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.quote_msg_id == other.quote_msg_id,
            self.account_id == other.account_id,
            self.quote_req_id == other.quote_req_id,
            self.quote_rject_reason == other.quote_rject_reason,
            self.quote_type == other.quote_type,
            self.bid_px == other.bid_px,
            self.offer_px == other.offer_px,
            self.bid_size == other.bid_size,
            self.offer_size == other.offer_size,
            self.appl_extend == other.appl_extend
        ])
        
    




class Quote2(BinaryCodec):
    def __init__(self):
        self.quote_id = ''
        self.quote_price = 0
        self.quote_qty = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.quote_id, 10, 'utf-8')
        buffer.write_i64_le(self.quote_price)
        buffer.write_i64_le(self.quote_qty)
    
    def decode(self, buffer: ByteBuf):
        self.quote_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_price = buffer.read_i64_le()
        self.quote_qty = buffer.read_i64_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.quote_id == other.quote_id,
            self.quote_price == other.quote_price,
            self.quote_qty == other.quote_qty
        ])
        
    

class QuoteResponseExtend070(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class QuoteResponseMessageFactory(MessageFactory[str, BinaryCodec]): ...
quoteResponseMessageFactory = QuoteResponseMessageFactory()
quoteResponseMessageFactory.register("070", QuoteResponseExtend070)


class QuoteResponse(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.cl_ord_id = ''
        self.account_id = ''
        self.branch_id = ''
        self.quote_resp_id = ''
        self.quote_resp_type = 0
        self.side = ''
        self.valid_until_time = 0
        self.quote_type = 0
        self.price_type = 0
        self.quote_2 = []
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.quote_resp_id, 10, 'utf-8')
        buffer.write_u8(self.quote_resp_type)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        buffer.write_i64_le(self.valid_until_time)
        buffer.write_u8(self.quote_type)
        buffer.write_u8(self.price_type)
        size = len(self.quote_2)
        buffer.write_u16_le(size)
        for i in range(size):
            self.quote_2[i].encode(buffer)
        
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.quote_resp_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_resp_type = buffer.read_u8()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.valid_until_time = buffer.read_i64_le()
        self.quote_type = buffer.read_u8()
        self.price_type = buffer.read_u8()
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            _quote_2 = Quote2()
            _quote_2.decode(buffer)
            self.quote_2.append(_quote_2)
        
        self.appl_extend = quoteResponseMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.cl_ord_id == other.cl_ord_id,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.quote_resp_id == other.quote_resp_id,
            self.quote_resp_type == other.quote_resp_type,
            self.side == other.side,
            self.valid_until_time == other.valid_until_time,
            self.quote_type == other.quote_type,
            self.price_type == other.price_type,
            self.quote_2 == other.quote_2,
            self.appl_extend == other.appl_extend
        ])
        
    




class AllegeQuoteExtend070(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
        self.counter_party_pbuid = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.counter_party_pbuid, 6, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.counter_party_pbuid = get_fixed_string(buffer, 6, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin,
            self.counter_party_pbuid == other.counter_party_pbuid
        ])
        
    

class AllegeQuoteMessageFactory(MessageFactory[str, BinaryCodec]): ...
allegeQuoteMessageFactory = AllegeQuoteMessageFactory()
allegeQuoteMessageFactory.register("070", AllegeQuoteExtend070)


class AllegeQuote(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.order_id = ''
        self.exec_id = ''
        self.cl_ord_id = ''
        self.account_id = ''
        self.quote_req_id = ''
        self.quote_id = ''
        self.quote_resp_id = ''
        self.quote_type = 0
        self.bid_px = 0
        self.offer_px = 0
        self.bid_size = 0
        self.offer_size = 0
        self.private_quote = 0
        self.valid_until_time = 0
        self.price_type = 0
        self.memo = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_req_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_resp_id, 10, 'utf-8')
        buffer.write_u8(self.quote_type)
        buffer.write_i64_le(self.bid_px)
        buffer.write_i64_le(self.offer_px)
        buffer.write_i64_le(self.bid_size)
        buffer.write_i64_le(self.offer_size)
        buffer.write_u8(self.private_quote)
        buffer.write_i64_le(self.valid_until_time)
        buffer.write_u8(self.price_type)
        write_fixed_string(buffer, self.memo, 120, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_req_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_resp_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_type = buffer.read_u8()
        self.bid_px = buffer.read_i64_le()
        self.offer_px = buffer.read_i64_le()
        self.bid_size = buffer.read_i64_le()
        self.offer_size = buffer.read_i64_le()
        self.private_quote = buffer.read_u8()
        self.valid_until_time = buffer.read_i64_le()
        self.price_type = buffer.read_u8()
        self.memo = get_fixed_string(buffer, 120, 'utf-8')
        self.appl_extend = allegeQuoteMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.order_id == other.order_id,
            self.exec_id == other.exec_id,
            self.cl_ord_id == other.cl_ord_id,
            self.account_id == other.account_id,
            self.quote_req_id == other.quote_req_id,
            self.quote_id == other.quote_id,
            self.quote_resp_id == other.quote_resp_id,
            self.quote_type == other.quote_type,
            self.bid_px == other.bid_px,
            self.offer_px == other.offer_px,
            self.bid_size == other.bid_size,
            self.offer_size == other.offer_size,
            self.private_quote == other.private_quote,
            self.valid_until_time == other.valid_until_time,
            self.price_type == other.price_type,
            self.memo == other.memo,
            self.appl_extend == other.appl_extend
        ])
        
    




class AllegeQuoteResponse(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.order_id = ''
        self.exec_id = ''
        self.cl_ord_id = ''
        self.account_id = ''
        self.quote_id = ''
        self.quote_resp_id = ''
        self.quote_resp_type = 0
        self.private_quote = 0
        self.order_qty = 0
        self.price = 0
        self.valid_until_time = 0
        self.quote_type = 0
        self.price_type = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.order_id, 16, 'utf-8')
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_id, 10, 'utf-8')
        write_fixed_string(buffer, self.quote_resp_id, 10, 'utf-8')
        buffer.write_u8(self.quote_resp_type)
        buffer.write_u8(self.private_quote)
        buffer.write_i64_le(self.order_qty)
        buffer.write_i64_le(self.price)
        buffer.write_i64_le(self.valid_until_time)
        buffer.write_u8(self.quote_type)
        buffer.write_u8(self.price_type)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.order_id = get_fixed_string(buffer, 16, 'utf-8')
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_resp_id = get_fixed_string(buffer, 10, 'utf-8')
        self.quote_resp_type = buffer.read_u8()
        self.private_quote = buffer.read_u8()
        self.order_qty = buffer.read_i64_le()
        self.price = buffer.read_i64_le()
        self.valid_until_time = buffer.read_i64_le()
        self.quote_type = buffer.read_u8()
        self.price_type = buffer.read_u8()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.order_id == other.order_id,
            self.exec_id == other.exec_id,
            self.cl_ord_id == other.cl_ord_id,
            self.account_id == other.account_id,
            self.quote_id == other.quote_id,
            self.quote_resp_id == other.quote_resp_id,
            self.quote_resp_type == other.quote_resp_type,
            self.private_quote == other.private_quote,
            self.order_qty == other.order_qty,
            self.price == other.price,
            self.valid_until_time == other.valid_until_time,
            self.quote_type == other.quote_type,
            self.price_type == other.price_type
        ])
        
    


class TradeCaptureReportExtend031(BinaryCodec):
    def __init__(self):
        self.member_id = ''
        self.trader_code = ''
        self.counter_party_member_id = ''
        self.counter_party_trader_code = ''
        self.settl_type = ''
        self.settl_period = ''
        self.cash_margin = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.trader_code, 5, 'utf-8')
        write_fixed_string(buffer, self.counter_party_member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.counter_party_trader_code, 5, 'utf-8')
        write_fixed_string(buffer, self.settl_type, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_period, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.memo, 120, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.trader_code = get_fixed_string(buffer, 5, 'utf-8')
        self.counter_party_member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.counter_party_trader_code = get_fixed_string(buffer, 5, 'utf-8')
        self.settl_type = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_period = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.memo = get_fixed_string(buffer, 120, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.member_id == other.member_id,
            self.trader_code == other.trader_code,
            self.counter_party_member_id == other.counter_party_member_id,
            self.counter_party_trader_code == other.counter_party_trader_code,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.cash_margin == other.cash_margin,
            self.memo == other.memo
        ])
        
    

class TradeCaptureReportExtend051(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16_le()
        self.expiration_type = buffer.read_u8()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.share_property == other.share_property
        ])
        
    

class TradeCaptureReportExtend060(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class TradeCaptureReportExtend061(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class TradeCaptureReportExtend062(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class TradeCaptureReportMessageFactory(MessageFactory[str, BinaryCodec]): ...
tradeCaptureReportMessageFactory = TradeCaptureReportMessageFactory()
tradeCaptureReportMessageFactory.register("031", TradeCaptureReportExtend031)
tradeCaptureReportMessageFactory.register("051", TradeCaptureReportExtend051)
tradeCaptureReportMessageFactory.register("060", TradeCaptureReportExtend060)
tradeCaptureReportMessageFactory.register("061", TradeCaptureReportExtend061)
tradeCaptureReportMessageFactory.register("062", TradeCaptureReportExtend062)


class TradeCaptureReport(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.trade_report_id = ''
        self.trade_report_type = 0
        self.trade_report_trans_type = 0
        self.trade_handling_instr = ''
        self.trade_report_ref_id = ''
        self.last_px = 0
        self.last_qty = 0
        self.trd_type = 0
        self.trd_sub_type = 0
        self.confirm_id = 0
        self.side = ''
        self.pbuid = ''
        self.account_id = ''
        self.branch_id = ''
        self.counter_party_pbuid = ''
        self.counter_party_account_id = ''
        self.counter_party_branch_id = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.trade_report_id, 10, 'utf-8')
        buffer.write_u8(self.trade_report_type)
        buffer.write_u8(self.trade_report_trans_type)
        write_fixed_string(buffer, self.trade_handling_instr, 1, 'utf-8')
        write_fixed_string(buffer, self.trade_report_ref_id, 10, 'utf-8')
        buffer.write_i64_le(self.last_px)
        buffer.write_i64_le(self.last_qty)
        buffer.write_u16_le(self.trd_type)
        buffer.write_u16_le(self.trd_sub_type)
        buffer.write_u32_le(self.confirm_id)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.counter_party_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.counter_party_account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.counter_party_branch_id, 2, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.trade_report_id = get_fixed_string(buffer, 10, 'utf-8')
        self.trade_report_type = buffer.read_u8()
        self.trade_report_trans_type = buffer.read_u8()
        self.trade_handling_instr = get_fixed_string(buffer, 1, 'utf-8')
        self.trade_report_ref_id = get_fixed_string(buffer, 10, 'utf-8')
        self.last_px = buffer.read_i64_le()
        self.last_qty = buffer.read_i64_le()
        self.trd_type = buffer.read_u16_le()
        self.trd_sub_type = buffer.read_u16_le()
        self.confirm_id = buffer.read_u32_le()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.counter_party_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.counter_party_account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.counter_party_branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.appl_extend = tradeCaptureReportMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.trade_report_id == other.trade_report_id,
            self.trade_report_type == other.trade_report_type,
            self.trade_report_trans_type == other.trade_report_trans_type,
            self.trade_handling_instr == other.trade_handling_instr,
            self.trade_report_ref_id == other.trade_report_ref_id,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.trd_type == other.trd_type,
            self.trd_sub_type == other.trd_sub_type,
            self.confirm_id == other.confirm_id,
            self.side == other.side,
            self.pbuid == other.pbuid,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.counter_party_pbuid == other.counter_party_pbuid,
            self.counter_party_account_id == other.counter_party_account_id,
            self.counter_party_branch_id == other.counter_party_branch_id,
            self.appl_extend == other.appl_extend
        ])
        
    












class TradeCaptureReportAckExtend031(BinaryCodec):
    def __init__(self):
        self.member_id = ''
        self.trader_code = ''
        self.counter_party_member_id = ''
        self.counter_party_trader_code = ''
        self.settl_type = ''
        self.settl_period = ''
        self.cash_margin = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.trader_code, 5, 'utf-8')
        write_fixed_string(buffer, self.counter_party_member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.counter_party_trader_code, 5, 'utf-8')
        write_fixed_string(buffer, self.settl_type, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_period, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.memo, 120, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.trader_code = get_fixed_string(buffer, 5, 'utf-8')
        self.counter_party_member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.counter_party_trader_code = get_fixed_string(buffer, 5, 'utf-8')
        self.settl_type = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_period = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.memo = get_fixed_string(buffer, 120, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.member_id == other.member_id,
            self.trader_code == other.trader_code,
            self.counter_party_member_id == other.counter_party_member_id,
            self.counter_party_trader_code == other.counter_party_trader_code,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.cash_margin == other.cash_margin,
            self.memo == other.memo
        ])
        
    

class TradeCaptureReportAckExtend051(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16_le()
        self.expiration_type = buffer.read_u8()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.share_property == other.share_property
        ])
        
    

class TradeCaptureReportAckExtend060(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class TradeCaptureReportAckExtend061(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class TradeCaptureReportAckExtend062(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class TradeCaptureReportAckMessageFactory(MessageFactory[str, BinaryCodec]): ...
tradeCaptureReportAckMessageFactory = TradeCaptureReportAckMessageFactory()
tradeCaptureReportAckMessageFactory.register("031", TradeCaptureReportAckExtend031)
tradeCaptureReportAckMessageFactory.register("051", TradeCaptureReportAckExtend051)
tradeCaptureReportAckMessageFactory.register("060", TradeCaptureReportAckExtend060)
tradeCaptureReportAckMessageFactory.register("061", TradeCaptureReportAckExtend061)
tradeCaptureReportAckMessageFactory.register("062", TradeCaptureReportAckExtend062)


class TradeCaptureReportAck(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.trade_id = ''
        self.trade_report_id = ''
        self.trade_report_type = 0
        self.trade_report_trans_type = 0
        self.trade_handling_instr = ''
        self.trade_report_ref_id = ''
        self.trd_ack_status = 0
        self.trd_rpt_status = 0
        self.trade_report_reject_reason = 0
        self.last_px = 0
        self.last_qty = 0
        self.trd_type = 0
        self.trd_sub_type = 0
        self.confirm_id = 0
        self.exec_id = ''
        self.side = ''
        self.pbuid = ''
        self.account_id = ''
        self.branch_id = ''
        self.counter_party_pbuid = ''
        self.counter_party_account_id = ''
        self.counter_party_branch_id = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.trade_id, 16, 'utf-8')
        write_fixed_string(buffer, self.trade_report_id, 10, 'utf-8')
        buffer.write_u8(self.trade_report_type)
        buffer.write_u8(self.trade_report_trans_type)
        write_fixed_string(buffer, self.trade_handling_instr, 1, 'utf-8')
        write_fixed_string(buffer, self.trade_report_ref_id, 10, 'utf-8')
        buffer.write_u8(self.trd_ack_status)
        buffer.write_u8(self.trd_rpt_status)
        buffer.write_u16_le(self.trade_report_reject_reason)
        buffer.write_i64_le(self.last_px)
        buffer.write_i64_le(self.last_qty)
        buffer.write_u16_le(self.trd_type)
        buffer.write_u16_le(self.trd_sub_type)
        buffer.write_u32_le(self.confirm_id)
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.counter_party_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.counter_party_account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.counter_party_branch_id, 2, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.trade_id = get_fixed_string(buffer, 16, 'utf-8')
        self.trade_report_id = get_fixed_string(buffer, 10, 'utf-8')
        self.trade_report_type = buffer.read_u8()
        self.trade_report_trans_type = buffer.read_u8()
        self.trade_handling_instr = get_fixed_string(buffer, 1, 'utf-8')
        self.trade_report_ref_id = get_fixed_string(buffer, 10, 'utf-8')
        self.trd_ack_status = buffer.read_u8()
        self.trd_rpt_status = buffer.read_u8()
        self.trade_report_reject_reason = buffer.read_u16_le()
        self.last_px = buffer.read_i64_le()
        self.last_qty = buffer.read_i64_le()
        self.trd_type = buffer.read_u16_le()
        self.trd_sub_type = buffer.read_u16_le()
        self.confirm_id = buffer.read_u32_le()
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.counter_party_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.counter_party_account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.counter_party_branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.appl_extend = tradeCaptureReportAckMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.trade_id == other.trade_id,
            self.trade_report_id == other.trade_report_id,
            self.trade_report_type == other.trade_report_type,
            self.trade_report_trans_type == other.trade_report_trans_type,
            self.trade_handling_instr == other.trade_handling_instr,
            self.trade_report_ref_id == other.trade_report_ref_id,
            self.trd_ack_status == other.trd_ack_status,
            self.trd_rpt_status == other.trd_rpt_status,
            self.trade_report_reject_reason == other.trade_report_reject_reason,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.trd_type == other.trd_type,
            self.trd_sub_type == other.trd_sub_type,
            self.confirm_id == other.confirm_id,
            self.exec_id == other.exec_id,
            self.side == other.side,
            self.pbuid == other.pbuid,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.counter_party_pbuid == other.counter_party_pbuid,
            self.counter_party_account_id == other.counter_party_account_id,
            self.counter_party_branch_id == other.counter_party_branch_id,
            self.appl_extend == other.appl_extend
        ])
        
    












class TradeCaptureConfirmExtend031(BinaryCodec):
    def __init__(self):
        self.member_id = ''
        self.trader_code = ''
        self.counter_party_member_id = ''
        self.counter_party_trader_code = ''
        self.settl_type = ''
        self.settl_period = ''
        self.cash_margin = ''
        self.memo = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.trader_code, 5, 'utf-8')
        write_fixed_string(buffer, self.counter_party_member_id, 6, 'utf-8')
        write_fixed_string(buffer, self.counter_party_trader_code, 5, 'utf-8')
        write_fixed_string(buffer, self.settl_type, 1, 'utf-8')
        write_fixed_string(buffer, self.settl_period, 1, 'utf-8')
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
        write_fixed_string(buffer, self.memo, 120, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.trader_code = get_fixed_string(buffer, 5, 'utf-8')
        self.counter_party_member_id = get_fixed_string(buffer, 6, 'utf-8')
        self.counter_party_trader_code = get_fixed_string(buffer, 5, 'utf-8')
        self.settl_type = get_fixed_string(buffer, 1, 'utf-8')
        self.settl_period = get_fixed_string(buffer, 1, 'utf-8')
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
        self.memo = get_fixed_string(buffer, 120, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.member_id == other.member_id,
            self.trader_code == other.trader_code,
            self.counter_party_member_id == other.counter_party_member_id,
            self.counter_party_trader_code == other.counter_party_trader_code,
            self.settl_type == other.settl_type,
            self.settl_period == other.settl_period,
            self.cash_margin == other.cash_margin,
            self.memo == other.memo
        ])
        
    

class TradeCaptureConfirmExtend051(BinaryCodec):
    def __init__(self):
        self.expiration_days = 0
        self.expiration_type = 0
        self.maturity_date = 0
        self.share_property = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.expiration_days)
        buffer.write_u8(self.expiration_type)
        buffer.write_u32_le(self.maturity_date)
        write_fixed_string(buffer, self.share_property, 2, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.expiration_days = buffer.read_u16_le()
        self.expiration_type = buffer.read_u8()
        self.maturity_date = buffer.read_u32_le()
        self.share_property = get_fixed_string(buffer, 2, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.expiration_days == other.expiration_days,
            self.expiration_type == other.expiration_type,
            self.maturity_date == other.maturity_date,
            self.share_property == other.share_property
        ])
        
    

class TradeCaptureConfirmExtend060(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class TradeCaptureConfirmExtend061(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    

class TradeCaptureConfirmExtend062(BinaryCodec):
    def __init__(self):
        self.cash_margin = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.cash_margin, 1, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.cash_margin = get_fixed_string(buffer, 1, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.cash_margin == other.cash_margin
        ])
        
    

class TradeCaptureConfirmMessageFactory(MessageFactory[str, BinaryCodec]): ...
tradeCaptureConfirmMessageFactory = TradeCaptureConfirmMessageFactory()
tradeCaptureConfirmMessageFactory.register("031", TradeCaptureConfirmExtend031)
tradeCaptureConfirmMessageFactory.register("051", TradeCaptureConfirmExtend051)
tradeCaptureConfirmMessageFactory.register("060", TradeCaptureConfirmExtend060)
tradeCaptureConfirmMessageFactory.register("061", TradeCaptureConfirmExtend061)
tradeCaptureConfirmMessageFactory.register("062", TradeCaptureConfirmExtend062)


class TradeCaptureConfirm(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.appl_id = ''
        self.reporting_pbuid = ''
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.owner_type = 0
        self.clearing_firm = ''
        self.transact_time = 0
        self.user_info = ''
        self.trade_id = ''
        self.trade_report_id = ''
        self.trade_report_type = 0
        self.trade_report_trans_type = 0
        self.trade_handling_instr = ''
        self.last_px = 0
        self.last_qty = 0
        self.trd_type = 0
        self.trd_sub_type = 0
        self.confirm_id = 0
        self.exec_id = ''
        self.side = ''
        self.pbuid = ''
        self.account_id = ''
        self.branch_id = ''
        self.counter_party_pbuid = ''
        self.counter_party_account_id = ''
        self.counter_party_branch_id = ''
        self.appl_extend = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        write_fixed_string(buffer, self.reporting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_u16_le(self.owner_type)
        write_fixed_string(buffer, self.clearing_firm, 2, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
        write_fixed_string(buffer, self.trade_id, 16, 'utf-8')
        write_fixed_string(buffer, self.trade_report_id, 10, 'utf-8')
        buffer.write_u8(self.trade_report_type)
        buffer.write_u8(self.trade_report_trans_type)
        write_fixed_string(buffer, self.trade_handling_instr, 1, 'utf-8')
        buffer.write_i64_le(self.last_px)
        buffer.write_i64_le(self.last_qty)
        buffer.write_u16_le(self.trd_type)
        buffer.write_u16_le(self.trd_sub_type)
        buffer.write_u32_le(self.confirm_id)
        write_fixed_string(buffer, self.exec_id, 16, 'utf-8')
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 2, 'utf-8')
        write_fixed_string(buffer, self.counter_party_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.counter_party_account_id, 10, 'utf-8')
        write_fixed_string(buffer, self.counter_party_branch_id, 2, 'utf-8')
        if self.appl_extend is not None:
            self.appl_extend.encode(buffer)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.reporting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.owner_type = buffer.read_u16_le()
        self.clearing_firm = get_fixed_string(buffer, 2, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
        self.trade_id = get_fixed_string(buffer, 16, 'utf-8')
        self.trade_report_id = get_fixed_string(buffer, 10, 'utf-8')
        self.trade_report_type = buffer.read_u8()
        self.trade_report_trans_type = buffer.read_u8()
        self.trade_handling_instr = get_fixed_string(buffer, 1, 'utf-8')
        self.last_px = buffer.read_i64_le()
        self.last_qty = buffer.read_i64_le()
        self.trd_type = buffer.read_u16_le()
        self.trd_sub_type = buffer.read_u16_le()
        self.confirm_id = buffer.read_u32_le()
        self.exec_id = get_fixed_string(buffer, 16, 'utf-8')
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.counter_party_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.counter_party_account_id = get_fixed_string(buffer, 10, 'utf-8')
        self.counter_party_branch_id = get_fixed_string(buffer, 2, 'utf-8')
        self.appl_extend = tradeCaptureConfirmMessageFactory.create(self.appl_id)
        self.appl_extend.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.appl_id == other.appl_id,
            self.reporting_pbuid == other.reporting_pbuid,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.owner_type == other.owner_type,
            self.clearing_firm == other.clearing_firm,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info,
            self.trade_id == other.trade_id,
            self.trade_report_id == other.trade_report_id,
            self.trade_report_type == other.trade_report_type,
            self.trade_report_trans_type == other.trade_report_trans_type,
            self.trade_handling_instr == other.trade_handling_instr,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.trd_type == other.trd_type,
            self.trd_sub_type == other.trd_sub_type,
            self.confirm_id == other.confirm_id,
            self.exec_id == other.exec_id,
            self.side == other.side,
            self.pbuid == other.pbuid,
            self.account_id == other.account_id,
            self.branch_id == other.branch_id,
            self.counter_party_pbuid == other.counter_party_pbuid,
            self.counter_party_account_id == other.counter_party_account_id,
            self.counter_party_branch_id == other.counter_party_branch_id,
            self.appl_extend == other.appl_extend
        ])
        
    












class BusinessReject(BinaryCodec):
    def __init__(self):
        self.appl_id = ''
        self.transact_time = 0
        self.submitting_pbuid = ''
        self.security_id = ''
        self.security_id_source = ''
        self.ref_seq_num = 0
        self.ref_msg_type = 0
        self.business_reject_ref_id = ''
        self.business_reject_reason = 0
        self.business_reject_text = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.appl_id, 3, 'utf-8')
        buffer.write_i64_le(self.transact_time)
        write_fixed_string(buffer, self.submitting_pbuid, 6, 'utf-8')
        write_fixed_string(buffer, self.security_id, 8, 'utf-8')
        write_fixed_string(buffer, self.security_id_source, 4, 'utf-8')
        buffer.write_i64_le(self.ref_seq_num)
        buffer.write_u32_le(self.ref_msg_type)
        write_fixed_string(buffer, self.business_reject_ref_id, 10, 'utf-8')
        buffer.write_u16_le(self.business_reject_reason)
        write_fixed_string(buffer, self.business_reject_text, 50, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.appl_id = get_fixed_string(buffer, 3, 'utf-8')
        self.transact_time = buffer.read_i64_le()
        self.submitting_pbuid = get_fixed_string(buffer, 6, 'utf-8')
        self.security_id = get_fixed_string(buffer, 8, 'utf-8')
        self.security_id_source = get_fixed_string(buffer, 4, 'utf-8')
        self.ref_seq_num = buffer.read_i64_le()
        self.ref_msg_type = buffer.read_u32_le()
        self.business_reject_ref_id = get_fixed_string(buffer, 10, 'utf-8')
        self.business_reject_reason = buffer.read_u16_le()
        self.business_reject_text = get_fixed_string(buffer, 50, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.appl_id == other.appl_id,
            self.transact_time == other.transact_time,
            self.submitting_pbuid == other.submitting_pbuid,
            self.security_id == other.security_id,
            self.security_id_source == other.security_id_source,
            self.ref_seq_num == other.ref_seq_num,
            self.ref_msg_type == other.ref_msg_type,
            self.business_reject_ref_id == other.business_reject_ref_id,
            self.business_reject_reason == other.business_reject_reason,
            self.business_reject_text == other.business_reject_text
        ])
        
    


class ReportPartitionSync(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index
        ])
        
    

class ReportSynchronization(BinaryCodec):
    def __init__(self):
        self.report_partition_sync = []
    
    def encode(self, buffer: ByteBuf):
        size = len(self.report_partition_sync)
        buffer.write_u16_le(size)
        for i in range(size):
            self.report_partition_sync[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            _report_partition_sync = ReportPartitionSync()
            _report_partition_sync.decode(buffer)
            self.report_partition_sync.append(_report_partition_sync)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.report_partition_sync == other.report_partition_sync
        ])
        
    


class TradingSessionStatus(BinaryCodec):
    def __init__(self):
        self.market_id = ''
        self.market_segment_id = ''
        self.trading_session_id = ''
        self.trading_session_sub_id = ''
        self.trad_ses_status = 0
        self.trad_ses_start_time = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.market_id, 3, 'utf-8')
        write_fixed_string(buffer, self.market_segment_id, 3, 'utf-8')
        write_fixed_string(buffer, self.trading_session_id, 3, 'utf-8')
        write_fixed_string(buffer, self.trading_session_sub_id, 3, 'utf-8')
        buffer.write_u8(self.trad_ses_status)
        buffer.write_i64_le(self.trad_ses_start_time)
    
    def decode(self, buffer: ByteBuf):
        self.market_id = get_fixed_string(buffer, 3, 'utf-8')
        self.market_segment_id = get_fixed_string(buffer, 3, 'utf-8')
        self.trading_session_id = get_fixed_string(buffer, 3, 'utf-8')
        self.trading_session_sub_id = get_fixed_string(buffer, 3, 'utf-8')
        self.trad_ses_status = buffer.read_u8()
        self.trad_ses_start_time = buffer.read_i64_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.market_id == other.market_id,
            self.market_segment_id == other.market_segment_id,
            self.trading_session_id == other.trading_session_id,
            self.trading_session_sub_id == other.trading_session_sub_id,
            self.trad_ses_status == other.trad_ses_status,
            self.trad_ses_start_time == other.trad_ses_start_time
        ])
        
    


class PlatformStateInfo(BinaryCodec):
    def __init__(self):
        self.platform_id = 0
        self.platform_state = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.platform_id)
        buffer.write_u16_le(self.platform_state)
    
    def decode(self, buffer: ByteBuf):
        self.platform_id = buffer.read_u16_le()
        self.platform_state = buffer.read_u16_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.platform_id == other.platform_id,
            self.platform_state == other.platform_state
        ])
        
    


class ReportFinished(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.report_index = 0
        self.platform_id = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        buffer.write_i64_le(self.report_index)
        buffer.write_u16_le(self.platform_id)
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.report_index = buffer.read_i64_le()
        self.platform_id = buffer.read_u16_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.report_index == other.report_index,
            self.platform_id == other.platform_id
        ])
        
    


class NoPartitions(BinaryCodec):
    def __init__(self):
        self.partition_no = 0
        self.partition_name = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_i32_le(self.partition_no)
        write_fixed_string(buffer, self.partition_name, 20, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.partition_no = buffer.read_i32_le()
        self.partition_name = get_fixed_string(buffer, 20, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.partition_no == other.partition_no,
            self.partition_name == other.partition_name
        ])
        
    

class PlatformInfo(BinaryCodec):
    def __init__(self):
        self.platform_id = 0
        self.no_partitions = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16_le(self.platform_id)
        size = len(self.no_partitions)
        buffer.write_u16_le(size)
        for i in range(size):
            self.no_partitions[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        self.platform_id = buffer.read_u16_le()
        size = get_len_le(buffer, 'u16')
        for i in range(size):
            _no_partitions = NoPartitions()
            _no_partitions.decode(buffer)
            self.no_partitions.append(_no_partitions)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.platform_id == other.platform_id,
            self.no_partitions == other.no_partitions
        ])
        
    


class BjseBinaryMessageFactory(MessageFactory[int, BinaryCodec]): ...
bjseBinaryMessageFactory = BjseBinaryMessageFactory()
bjseBinaryMessageFactory.register(1, Logon)
bjseBinaryMessageFactory.register(2, Logout)
bjseBinaryMessageFactory.register(3, Heartbeat)
bjseBinaryMessageFactory.register(101000, NewOrder)
bjseBinaryMessageFactory.register(102000, OrderCancelRequest)
bjseBinaryMessageFactory.register(201000, CancelReject)
bjseBinaryMessageFactory.register(202010, ExecutionConfirm)
bjseBinaryMessageFactory.register(203010, ExecutionReport)
bjseBinaryMessageFactory.register(5, ReportSynchronization)
bjseBinaryMessageFactory.register(6, PlatformStateInfo)
bjseBinaryMessageFactory.register(7, ReportFinished)


class BjseBinary(BinaryCodec):
    def __init__(self):
        self.msg_type = 0
        self.body_length = 0
        self.body = None
        self.checksum = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32_le(self.msg_type)
        buffer.write_u32_le(self.body_length)
        if self.body is not None:
            self.body.encode(buffer)
        buffer.write_u32_le(self.checksum)
    
    def decode(self, buffer: ByteBuf):
        self.msg_type = buffer.read_u32_le()
        self.body_length = buffer.read_u32_le()
        self.body = bjseBinaryMessageFactory.create(self.msg_type)
        self.body.decode(buffer)
        self.checksum = buffer.read_u32_le()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.msg_type == other.msg_type,
            self.body_length == other.body_length,
            self.body == other.body,
            self.checksum == other.checksum
        ])
        
    


