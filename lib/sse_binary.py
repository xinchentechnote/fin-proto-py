# Code generated by fin-protoc. DO NOT EDIT.
from bytebuf import ByteBuf
from checksum import create_checksum_service
from message_factory import MessageFactory
from codec import *

class Heartbeat(BinaryCodec):
    def __init__(self):
        pass
    
    def encode(self, buffer: ByteBuf):
        pass
    
    def decode(self, buffer: ByteBuf):
        pass
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True
    


class Logon(BinaryCodec):
    def __init__(self):
        self.sender_comp_id = ''
        self.target_comp_id = ''
        self.heart_bt_int = 0
        self.prtcl_version = ''
        self.trade_date = 0
        self.q_size = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.sender_comp_id, 32, 'utf-8')
        write_fixed_string(buffer, self.target_comp_id, 32, 'utf-8')
        buffer.write_u16(self.heart_bt_int)
        write_fixed_string(buffer, self.prtcl_version, 8, 'utf-8')
        buffer.write_u32(self.trade_date)
        buffer.write_u32(self.q_size)
    
    def decode(self, buffer: ByteBuf):
        self.sender_comp_id = get_fixed_string(buffer, 32, 'utf-8')
        self.target_comp_id = get_fixed_string(buffer, 32, 'utf-8')
        self.heart_bt_int = buffer.read_u16()
        self.prtcl_version = get_fixed_string(buffer, 8, 'utf-8')
        self.trade_date = buffer.read_u32()
        self.q_size = buffer.read_u32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.sender_comp_id == other.sender_comp_id,
            self.target_comp_id == other.target_comp_id,
            self.heart_bt_int == other.heart_bt_int,
            self.prtcl_version == other.prtcl_version,
            self.trade_date == other.trade_date,
            self.q_size == other.q_size
        ])
        
    


class Logout(BinaryCodec):
    def __init__(self):
        self.session_status = 0
        self.text = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.session_status)
        write_fixed_string(buffer, self.text, 64, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.session_status = buffer.read_u32()
        self.text = get_fixed_string(buffer, 64, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.session_status == other.session_status,
            self.text == other.text
        ])
        
    


class NewOrderSingle(BinaryCodec):
    def __init__(self):
        self.biz_id = 0
        self.biz_pbu = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.account = ''
        self.owner_type = 0
        self.side = ''
        self.price = 0
        self.order_qty = 0
        self.ord_type = ''
        self.time_in_force = ''
        self.transact_time = 0
        self.credit_tag = ''
        self.clearing_firm = ''
        self.branch_id = ''
        self.user_info = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.biz_id)
        write_fixed_string(buffer, self.biz_pbu, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.security_id, 12, 'utf-8')
        write_fixed_string(buffer, self.account, 13, 'utf-8')
        buffer.write_u8(self.owner_type)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        buffer.write_i64(self.price)
        buffer.write_i64(self.order_qty)
        write_fixed_string(buffer, self.ord_type, 1, 'utf-8')
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        buffer.write_u64(self.transact_time)
        write_fixed_string(buffer, self.credit_tag, 2, 'utf-8')
        write_fixed_string(buffer, self.clearing_firm, 8, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 8, 'utf-8')
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.biz_id = buffer.read_u32()
        self.biz_pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.security_id = get_fixed_string(buffer, 12, 'utf-8')
        self.account = get_fixed_string(buffer, 13, 'utf-8')
        self.owner_type = buffer.read_u8()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.price = buffer.read_i64()
        self.order_qty = buffer.read_i64()
        self.ord_type = get_fixed_string(buffer, 1, 'utf-8')
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.transact_time = buffer.read_u64()
        self.credit_tag = get_fixed_string(buffer, 2, 'utf-8')
        self.clearing_firm = get_fixed_string(buffer, 8, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 8, 'utf-8')
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.biz_id == other.biz_id,
            self.biz_pbu == other.biz_pbu,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.account == other.account,
            self.owner_type == other.owner_type,
            self.side == other.side,
            self.price == other.price,
            self.order_qty == other.order_qty,
            self.ord_type == other.ord_type,
            self.time_in_force == other.time_in_force,
            self.transact_time == other.transact_time,
            self.credit_tag == other.credit_tag,
            self.clearing_firm == other.clearing_firm,
            self.branch_id == other.branch_id,
            self.user_info == other.user_info
        ])
        
    


class OrderCancel(BinaryCodec):
    def __init__(self):
        self.biz_id = 0
        self.biz_pbu = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.account = ''
        self.owner_type = 0
        self.side = ''
        self.orig_cl_ord_id = ''
        self.transact_time = 0
        self.branch_id = ''
        self.user_info = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.biz_id)
        write_fixed_string(buffer, self.biz_pbu, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.security_id, 12, 'utf-8')
        write_fixed_string(buffer, self.account, 13, 'utf-8')
        buffer.write_u8(self.owner_type)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        buffer.write_u64(self.transact_time)
        write_fixed_string(buffer, self.branch_id, 8, 'utf-8')
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.biz_id = buffer.read_u32()
        self.biz_pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.security_id = get_fixed_string(buffer, 12, 'utf-8')
        self.account = get_fixed_string(buffer, 13, 'utf-8')
        self.owner_type = buffer.read_u8()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.transact_time = buffer.read_u64()
        self.branch_id = get_fixed_string(buffer, 8, 'utf-8')
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.biz_id == other.biz_id,
            self.biz_pbu == other.biz_pbu,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.account == other.account,
            self.owner_type == other.owner_type,
            self.side == other.side,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.transact_time == other.transact_time,
            self.branch_id == other.branch_id,
            self.user_info == other.user_info
        ])
        
    


class Confirm(BinaryCodec):
    def __init__(self):
        self.pbu = ''
        self.set_id = 0
        self.report_index = 0
        self.biz_id = 0
        self.exec_type = ''
        self.biz_pbu = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.account = ''
        self.owner_type = 0
        self.side = ''
        self.price = 0
        self.order_qty = 0
        self.leaves_qty = 0
        self.cxl_qty = 0
        self.ord_type = ''
        self.time_in_force = ''
        self.ord_status = ''
        self.credit_tag = ''
        self.orig_cl_ord_id = ''
        self.clearing_firm = ''
        self.branch_id = ''
        self.ord_rej_reason = 0
        self.ord_cnfm_id = ''
        self.orig_ord_cnfm_id = ''
        self.trade_date = 0
        self.transact_time = 0
        self.user_info = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.pbu, 8, 'utf-8')
        buffer.write_u32(self.set_id)
        buffer.write_u64(self.report_index)
        buffer.write_u32(self.biz_id)
        write_fixed_string(buffer, self.exec_type, 1, 'utf-8')
        write_fixed_string(buffer, self.biz_pbu, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.security_id, 12, 'utf-8')
        write_fixed_string(buffer, self.account, 13, 'utf-8')
        buffer.write_u8(self.owner_type)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        buffer.write_i64(self.price)
        buffer.write_i64(self.order_qty)
        buffer.write_i64(self.leaves_qty)
        buffer.write_i64(self.cxl_qty)
        write_fixed_string(buffer, self.ord_type, 1, 'utf-8')
        write_fixed_string(buffer, self.time_in_force, 1, 'utf-8')
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        write_fixed_string(buffer, self.credit_tag, 2, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.clearing_firm, 8, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 8, 'utf-8')
        buffer.write_u32(self.ord_rej_reason)
        write_fixed_string(buffer, self.ord_cnfm_id, 16, 'utf-8')
        write_fixed_string(buffer, self.orig_ord_cnfm_id, 16, 'utf-8')
        buffer.write_u32(self.trade_date)
        buffer.write_u64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.set_id = buffer.read_u32()
        self.report_index = buffer.read_u64()
        self.biz_id = buffer.read_u32()
        self.exec_type = get_fixed_string(buffer, 1, 'utf-8')
        self.biz_pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.security_id = get_fixed_string(buffer, 12, 'utf-8')
        self.account = get_fixed_string(buffer, 13, 'utf-8')
        self.owner_type = buffer.read_u8()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.price = buffer.read_i64()
        self.order_qty = buffer.read_i64()
        self.leaves_qty = buffer.read_i64()
        self.cxl_qty = buffer.read_i64()
        self.ord_type = get_fixed_string(buffer, 1, 'utf-8')
        self.time_in_force = get_fixed_string(buffer, 1, 'utf-8')
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.credit_tag = get_fixed_string(buffer, 2, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.clearing_firm = get_fixed_string(buffer, 8, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 8, 'utf-8')
        self.ord_rej_reason = buffer.read_u32()
        self.ord_cnfm_id = get_fixed_string(buffer, 16, 'utf-8')
        self.orig_ord_cnfm_id = get_fixed_string(buffer, 16, 'utf-8')
        self.trade_date = buffer.read_u32()
        self.transact_time = buffer.read_u64()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.pbu == other.pbu,
            self.set_id == other.set_id,
            self.report_index == other.report_index,
            self.biz_id == other.biz_id,
            self.exec_type == other.exec_type,
            self.biz_pbu == other.biz_pbu,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.account == other.account,
            self.owner_type == other.owner_type,
            self.side == other.side,
            self.price == other.price,
            self.order_qty == other.order_qty,
            self.leaves_qty == other.leaves_qty,
            self.cxl_qty == other.cxl_qty,
            self.ord_type == other.ord_type,
            self.time_in_force == other.time_in_force,
            self.ord_status == other.ord_status,
            self.credit_tag == other.credit_tag,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.clearing_firm == other.clearing_firm,
            self.branch_id == other.branch_id,
            self.ord_rej_reason == other.ord_rej_reason,
            self.ord_cnfm_id == other.ord_cnfm_id,
            self.orig_ord_cnfm_id == other.orig_ord_cnfm_id,
            self.trade_date == other.trade_date,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info
        ])
        
    


class CancelReject(BinaryCodec):
    def __init__(self):
        self.pbu = ''
        self.set_id = 0
        self.report_index = 0
        self.biz_id = 0
        self.biz_pbu = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.orig_cl_ord_id = ''
        self.branch_id = ''
        self.cxl_rej_reason = 0
        self.trade_date = 0
        self.transact_time = 0
        self.user_info = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.pbu, 8, 'utf-8')
        buffer.write_u32(self.set_id)
        buffer.write_u64(self.report_index)
        buffer.write_u32(self.biz_id)
        write_fixed_string(buffer, self.biz_pbu, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.security_id, 12, 'utf-8')
        write_fixed_string(buffer, self.orig_cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 8, 'utf-8')
        buffer.write_u32(self.cxl_rej_reason)
        buffer.write_u32(self.trade_date)
        buffer.write_u64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.set_id = buffer.read_u32()
        self.report_index = buffer.read_u64()
        self.biz_id = buffer.read_u32()
        self.biz_pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.security_id = get_fixed_string(buffer, 12, 'utf-8')
        self.orig_cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 8, 'utf-8')
        self.cxl_rej_reason = buffer.read_u32()
        self.trade_date = buffer.read_u32()
        self.transact_time = buffer.read_u64()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.pbu == other.pbu,
            self.set_id == other.set_id,
            self.report_index == other.report_index,
            self.biz_id == other.biz_id,
            self.biz_pbu == other.biz_pbu,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.branch_id == other.branch_id,
            self.cxl_rej_reason == other.cxl_rej_reason,
            self.trade_date == other.trade_date,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info
        ])
        
    


class Report(BinaryCodec):
    def __init__(self):
        self.pbu = ''
        self.set_id = 0
        self.report_index = 0
        self.biz_id = 0
        self.exec_type = ''
        self.biz_pbu = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.account = ''
        self.owner_type = 0
        self.order_entry_time = 0
        self.last_px = 0
        self.last_qty = 0
        self.gross_trade_amt = 0
        self.side = ''
        self.order_qty = 0
        self.leaves_qty = 0
        self.ord_status = ''
        self.credit_tag = ''
        self.clearing_firm = ''
        self.branch_id = ''
        self.trd_cnfm_id = ''
        self.ord_cnfm_id = ''
        self.trade_date = 0
        self.transact_time = 0
        self.user_info = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.pbu, 8, 'utf-8')
        buffer.write_u32(self.set_id)
        buffer.write_u64(self.report_index)
        buffer.write_u32(self.biz_id)
        write_fixed_string(buffer, self.exec_type, 1, 'utf-8')
        write_fixed_string(buffer, self.biz_pbu, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.security_id, 12, 'utf-8')
        write_fixed_string(buffer, self.account, 13, 'utf-8')
        buffer.write_u8(self.owner_type)
        buffer.write_u64(self.order_entry_time)
        buffer.write_i64(self.last_px)
        buffer.write_i64(self.last_qty)
        buffer.write_i64(self.gross_trade_amt)
        write_fixed_string(buffer, self.side, 1, 'utf-8')
        buffer.write_i64(self.order_qty)
        buffer.write_i64(self.leaves_qty)
        write_fixed_string(buffer, self.ord_status, 1, 'utf-8')
        write_fixed_string(buffer, self.credit_tag, 2, 'utf-8')
        write_fixed_string(buffer, self.clearing_firm, 8, 'utf-8')
        write_fixed_string(buffer, self.branch_id, 8, 'utf-8')
        write_fixed_string(buffer, self.trd_cnfm_id, 16, 'utf-8')
        write_fixed_string(buffer, self.ord_cnfm_id, 16, 'utf-8')
        buffer.write_u32(self.trade_date)
        buffer.write_u64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.set_id = buffer.read_u32()
        self.report_index = buffer.read_u64()
        self.biz_id = buffer.read_u32()
        self.exec_type = get_fixed_string(buffer, 1, 'utf-8')
        self.biz_pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.security_id = get_fixed_string(buffer, 12, 'utf-8')
        self.account = get_fixed_string(buffer, 13, 'utf-8')
        self.owner_type = buffer.read_u8()
        self.order_entry_time = buffer.read_u64()
        self.last_px = buffer.read_i64()
        self.last_qty = buffer.read_i64()
        self.gross_trade_amt = buffer.read_i64()
        self.side = get_fixed_string(buffer, 1, 'utf-8')
        self.order_qty = buffer.read_i64()
        self.leaves_qty = buffer.read_i64()
        self.ord_status = get_fixed_string(buffer, 1, 'utf-8')
        self.credit_tag = get_fixed_string(buffer, 2, 'utf-8')
        self.clearing_firm = get_fixed_string(buffer, 8, 'utf-8')
        self.branch_id = get_fixed_string(buffer, 8, 'utf-8')
        self.trd_cnfm_id = get_fixed_string(buffer, 16, 'utf-8')
        self.ord_cnfm_id = get_fixed_string(buffer, 16, 'utf-8')
        self.trade_date = buffer.read_u32()
        self.transact_time = buffer.read_u64()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.pbu == other.pbu,
            self.set_id == other.set_id,
            self.report_index == other.report_index,
            self.biz_id == other.biz_id,
            self.exec_type == other.exec_type,
            self.biz_pbu == other.biz_pbu,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.account == other.account,
            self.owner_type == other.owner_type,
            self.order_entry_time == other.order_entry_time,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.gross_trade_amt == other.gross_trade_amt,
            self.side == other.side,
            self.order_qty == other.order_qty,
            self.leaves_qty == other.leaves_qty,
            self.ord_status == other.ord_status,
            self.credit_tag == other.credit_tag,
            self.clearing_firm == other.clearing_firm,
            self.branch_id == other.branch_id,
            self.trd_cnfm_id == other.trd_cnfm_id,
            self.ord_cnfm_id == other.ord_cnfm_id,
            self.trade_date == other.trade_date,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info
        ])
        
    


class OrderReject(BinaryCodec):
    def __init__(self):
        self.biz_id = 0
        self.biz_pbu = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.ord_rej_reason = 0
        self.trade_date = 0
        self.transact_time = 0
        self.user_info = ''
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.biz_id)
        write_fixed_string(buffer, self.biz_pbu, 8, 'utf-8')
        write_fixed_string(buffer, self.cl_ord_id, 10, 'utf-8')
        write_fixed_string(buffer, self.security_id, 12, 'utf-8')
        buffer.write_u32(self.ord_rej_reason)
        buffer.write_u32(self.trade_date)
        buffer.write_u64(self.transact_time)
        write_fixed_string(buffer, self.user_info, 32, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.biz_id = buffer.read_u32()
        self.biz_pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.cl_ord_id = get_fixed_string(buffer, 10, 'utf-8')
        self.security_id = get_fixed_string(buffer, 12, 'utf-8')
        self.ord_rej_reason = buffer.read_u32()
        self.trade_date = buffer.read_u32()
        self.transact_time = buffer.read_u64()
        self.user_info = get_fixed_string(buffer, 32, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.biz_id == other.biz_id,
            self.biz_pbu == other.biz_pbu,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.ord_rej_reason == other.ord_rej_reason,
            self.trade_date == other.trade_date,
            self.transact_time == other.transact_time,
            self.user_info == other.user_info
        ])
        
    


class PlatformState(BinaryCodec):
    def __init__(self):
        self.platform_id = 0
        self.platform_state = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.platform_id)
        buffer.write_u16(self.platform_state)
    
    def decode(self, buffer: ByteBuf):
        self.platform_id = buffer.read_u16()
        self.platform_state = buffer.read_u16()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.platform_id == other.platform_id,
            self.platform_state == other.platform_state
        ])
        
    


class ExecRptInfo(BinaryCodec):
    def __init__(self):
        self.platform_id = 0
        self.pbu = []
        self.set_id = []
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u16(self.platform_id)
        size = len(self.pbu)
        buffer.write_u16(size)
        for i in range(size):
            write_fixed_string(buffer, self.pbu[i], 8, 'utf-8')
        
        size = len(self.set_id)
        buffer.write_u16(size)
        for i in range(size):
            buffer.write_u32(self.set_id[i])
        
    
    def decode(self, buffer: ByteBuf):
        self.platform_id = buffer.read_u16()
        size = get_len(buffer, 'u16')
        for i in range(size):
            self.pbu.append(get_fixed_string(buffer,  8, 'utf-8'))
        
        size = get_len(buffer, 'u16')
        for i in range(size):
            self.set_id.append(buffer.read_u32())
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.platform_id == other.platform_id,
            self.pbu == other.pbu,
            self.set_id == other.set_id
        ])
        
    


class SubExecRptSync(BinaryCodec):
    def __init__(self):
        self.pbu = ''
        self.set_id = 0
        self.begin_report_index = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.pbu, 8, 'utf-8')
        buffer.write_u32(self.set_id)
        buffer.write_u64(self.begin_report_index)
    
    def decode(self, buffer: ByteBuf):
        self.pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.set_id = buffer.read_u32()
        self.begin_report_index = buffer.read_u64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.pbu == other.pbu,
            self.set_id == other.set_id,
            self.begin_report_index == other.begin_report_index
        ])
        
    

class ExecRptSync(BinaryCodec):
    def __init__(self):
        self.sub_exec_rpt_sync = []
    
    def encode(self, buffer: ByteBuf):
        size = len(self.sub_exec_rpt_sync)
        buffer.write_u16(size)
        for i in range(size):
            self.sub_exec_rpt_sync[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        size = get_len(buffer, 'u16')
        for i in range(size):
            _sub_exec_rpt_sync = SubExecRptSync()
            _sub_exec_rpt_sync.decode(buffer)
            self.sub_exec_rpt_sync.append(_sub_exec_rpt_sync)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.sub_exec_rpt_sync == other.sub_exec_rpt_sync
        ])
        
    


class SubExecRptSyncRsp(BinaryCodec):
    def __init__(self):
        self.pbu = ''
        self.set_id = 0
        self.begin_report_index = 0
        self.end_report_index = 0
        self.rej_reason = 0
        self.text = ''
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.pbu, 8, 'utf-8')
        buffer.write_u32(self.set_id)
        buffer.write_u64(self.begin_report_index)
        buffer.write_u64(self.end_report_index)
        buffer.write_u32(self.rej_reason)
        write_fixed_string(buffer, self.text, 64, 'utf-8')
    
    def decode(self, buffer: ByteBuf):
        self.pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.set_id = buffer.read_u32()
        self.begin_report_index = buffer.read_u64()
        self.end_report_index = buffer.read_u64()
        self.rej_reason = buffer.read_u32()
        self.text = get_fixed_string(buffer, 64, 'utf-8')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.pbu == other.pbu,
            self.set_id == other.set_id,
            self.begin_report_index == other.begin_report_index,
            self.end_report_index == other.end_report_index,
            self.rej_reason == other.rej_reason,
            self.text == other.text
        ])
        
    

class ExecRptSyncRsp(BinaryCodec):
    def __init__(self):
        self.sub_exec_rpt_sync_rsp = []
    
    def encode(self, buffer: ByteBuf):
        size = len(self.sub_exec_rpt_sync_rsp)
        buffer.write_u16(size)
        for i in range(size):
            self.sub_exec_rpt_sync_rsp[i].encode(buffer)
        
    
    def decode(self, buffer: ByteBuf):
        size = get_len(buffer, 'u16')
        for i in range(size):
            _sub_exec_rpt_sync_rsp = SubExecRptSyncRsp()
            _sub_exec_rpt_sync_rsp.decode(buffer)
            self.sub_exec_rpt_sync_rsp.append(_sub_exec_rpt_sync_rsp)
        
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.sub_exec_rpt_sync_rsp == other.sub_exec_rpt_sync_rsp
        ])
        
    


class ExecRptEndOfStream(BinaryCodec):
    def __init__(self):
        self.pbu = ''
        self.set_id = 0
        self.end_report_index = 0
    
    def encode(self, buffer: ByteBuf):
        write_fixed_string(buffer, self.pbu, 8, 'utf-8')
        buffer.write_u32(self.set_id)
        buffer.write_u64(self.end_report_index)
    
    def decode(self, buffer: ByteBuf):
        self.pbu = get_fixed_string(buffer, 8, 'utf-8')
        self.set_id = buffer.read_u32()
        self.end_report_index = buffer.read_u64()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.pbu == other.pbu,
            self.set_id == other.set_id,
            self.end_report_index == other.end_report_index
        ])
        
    


class SseBinaryMessageFactory(MessageFactory[int, BinaryCodec]): ...
sseBinaryMessageFactory = SseBinaryMessageFactory()
sseBinaryMessageFactory.register(33, Heartbeat)
sseBinaryMessageFactory.register(40, Logon)
sseBinaryMessageFactory.register(41, Logout)
sseBinaryMessageFactory.register(58, NewOrderSingle)
sseBinaryMessageFactory.register(61, OrderCancel)
sseBinaryMessageFactory.register(32, Confirm)
sseBinaryMessageFactory.register(59, CancelReject)
sseBinaryMessageFactory.register(103, Report)
sseBinaryMessageFactory.register(204, OrderReject)
sseBinaryMessageFactory.register(209, PlatformState)
sseBinaryMessageFactory.register(208, ExecRptInfo)
sseBinaryMessageFactory.register(206, ExecRptSync)
sseBinaryMessageFactory.register(207, ExecRptSyncRsp)
sseBinaryMessageFactory.register(210, ExecRptEndOfStream)


class SseBinary(BinaryCodec):
    def __init__(self):
        self.msg_type = 0
        self.msg_seq_num = 0
        self.msg_body_len = 0
        self.body = None
        self.checksum = 0
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.msg_type)
        buffer.write_u64(self.msg_seq_num)
        msg_body_len_pos = buffer.write_index
        buffer.write_u32(0)
        body_start = buffer.write_index
        self.body.encode(buffer)
        body_end = buffer.write_index
        self.msg_body_len = body_end - body_start
        buffer.write_u32_at(msg_body_len_pos, self.msg_body_len)
        service = create_checksum_service("SSE_BIN")
        if service :
            self.checksum = service.calc(buffer)
        buffer.write_u32(self.checksum)
    
    def decode(self, buffer: ByteBuf):
        self.msg_type = buffer.read_u32()
        self.msg_seq_num = buffer.read_u64()
        self.msg_body_len = buffer.read_u32()
        self.body = sseBinaryMessageFactory.create(self.msg_type)
        self.body.decode(buffer)
        self.checksum = buffer.read_u32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.msg_type == other.msg_type,
            self.msg_seq_num == other.msg_seq_num,
            self.msg_body_len == other.msg_body_len,
            self.body == other.body,
            self.checksum == other.checksum
        ])
        
    


