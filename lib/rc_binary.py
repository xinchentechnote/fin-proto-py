# Code generated by fin-protoc. DO NOT EDIT.
from bytebuf import ByteBuf
from checksum import create_checksum_service
from codec import *
from lib.message_factory import MessageFactory

class RcBinaryMessageFactory(MessageFactory[int, BinaryCodec]): ...


class NewOrder(BinaryCodec):
    def __init__(self):
        self.unique_order_id = ''
        self.cl_ord_id = ''
        self.security_id = ''
        self.side = ''
        self.price = 0
        self.order_qty = 0
        self.ord_type = ''
        self.account = ''
    
    def encode(self, buffer: ByteBuf):
        put_string(buffer, self.unique_order_id, 'u32')
        put_string(buffer, self.cl_ord_id, 'u32')
        put_string(buffer, self.security_id, 'u32')
        write_fixed_string(buffer, self.side, 1)
        buffer.write_u64(self.price)
        buffer.write_u64(self.order_qty)
        write_fixed_string(buffer, self.ord_type, 1)
        put_string(buffer, self.account, 'u32')
    
    def decode(self, buffer: ByteBuf):
        self.unique_order_id = get_string(buffer,'u32')
        self.cl_ord_id = get_string(buffer,'u32')
        self.security_id = get_string(buffer,'u32')
        self.side = buffer.read_bytes(1).decode('utf-8').strip('\x00')
        self.price = buffer.read_u64()
        self.order_qty = buffer.read_u64()
        self.ord_type = buffer.read_bytes(1).decode('utf-8').strip('\x00')
        self.account = get_string(buffer,'u32')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.unique_order_id == other.unique_order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.security_id == other.security_id,
            self.side == other.side,
            self.price == other.price,
            self.order_qty == other.order_qty,
            self.ord_type == other.ord_type,
            self.account == other.account
        ])
        
    


class OrderConfirm(BinaryCodec):
    def __init__(self):
        self.unique_order_id = ''
        self.unique_orig_order_id = ''
        self.cl_ord_id = ''
        self.exec_type = ''
        self.ord_rej_reason = 0
        self.ord_cnfm_id = ''
    
    def encode(self, buffer: ByteBuf):
        put_string(buffer, self.unique_order_id, 'u32')
        put_string(buffer, self.unique_orig_order_id, 'u32')
        put_string(buffer, self.cl_ord_id, 'u32')
        write_fixed_string(buffer, self.exec_type, 1)
        buffer.write_u32(self.ord_rej_reason)
        put_string(buffer, self.ord_cnfm_id, 'u32')
    
    def decode(self, buffer: ByteBuf):
        self.unique_order_id = get_string(buffer,'u32')
        self.unique_orig_order_id = get_string(buffer,'u32')
        self.cl_ord_id = get_string(buffer,'u32')
        self.exec_type = buffer.read_bytes(1).decode('utf-8').strip('\x00')
        self.ord_rej_reason = buffer.read_u32()
        self.ord_cnfm_id = get_string(buffer,'u32')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.unique_order_id == other.unique_order_id,
            self.unique_orig_order_id == other.unique_orig_order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.exec_type == other.exec_type,
            self.ord_rej_reason == other.ord_rej_reason,
            self.ord_cnfm_id == other.ord_cnfm_id
        ])
        
    


class ExecutionReport(BinaryCodec):
    def __init__(self):
        self.unique_order_id = ''
        self.cl_ord_id = ''
        self.ord_cnfm_id = ''
        self.last_px = 0
        self.last_qty = 0
        self.ord_status = ''
    
    def encode(self, buffer: ByteBuf):
        put_string(buffer, self.unique_order_id, 'u32')
        put_string(buffer, self.cl_ord_id, 'u32')
        put_string(buffer, self.ord_cnfm_id, 'u32')
        buffer.write_u64(self.last_px)
        buffer.write_u64(self.last_qty)
        write_fixed_string(buffer, self.ord_status, 1)
    
    def decode(self, buffer: ByteBuf):
        self.unique_order_id = get_string(buffer,'u32')
        self.cl_ord_id = get_string(buffer,'u32')
        self.ord_cnfm_id = get_string(buffer,'u32')
        self.last_px = buffer.read_u64()
        self.last_qty = buffer.read_u64()
        self.ord_status = buffer.read_bytes(1).decode('utf-8').strip('\x00')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.unique_order_id == other.unique_order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.ord_cnfm_id == other.ord_cnfm_id,
            self.last_px == other.last_px,
            self.last_qty == other.last_qty,
            self.ord_status == other.ord_status
        ])
        
    


class OrderCancel(BinaryCodec):
    def __init__(self):
        self.unique_order_id = ''
        self.unique_orig_order_id = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.security_id = ''
    
    def encode(self, buffer: ByteBuf):
        put_string(buffer, self.unique_order_id, 'u32')
        put_string(buffer, self.unique_orig_order_id, 'u32')
        put_string(buffer, self.cl_ord_id, 'u32')
        put_string(buffer, self.orig_cl_ord_id, 'u32')
        put_string(buffer, self.security_id, 'u32')
    
    def decode(self, buffer: ByteBuf):
        self.unique_order_id = get_string(buffer,'u32')
        self.unique_orig_order_id = get_string(buffer,'u32')
        self.cl_ord_id = get_string(buffer,'u32')
        self.orig_cl_ord_id = get_string(buffer,'u32')
        self.security_id = get_string(buffer,'u32')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.unique_order_id == other.unique_order_id,
            self.unique_orig_order_id == other.unique_orig_order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.security_id == other.security_id
        ])
        
    


class CancelReject(BinaryCodec):
    def __init__(self):
        self.unique_order_id = ''
        self.unique_orig_order_id = ''
        self.cl_ord_id = ''
        self.orig_cl_ord_id = ''
        self.cxl_rej_reason = 0
    
    def encode(self, buffer: ByteBuf):
        put_string(buffer, self.unique_order_id, 'u32')
        put_string(buffer, self.unique_orig_order_id, 'u32')
        put_string(buffer, self.cl_ord_id, 'u32')
        put_string(buffer, self.orig_cl_ord_id, 'u32')
        buffer.write_u32(self.cxl_rej_reason)
    
    def decode(self, buffer: ByteBuf):
        self.unique_order_id = get_string(buffer,'u32')
        self.unique_orig_order_id = get_string(buffer,'u32')
        self.cl_ord_id = get_string(buffer,'u32')
        self.orig_cl_ord_id = get_string(buffer,'u32')
        self.cxl_rej_reason = buffer.read_u32()
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.unique_order_id == other.unique_order_id,
            self.unique_orig_order_id == other.unique_orig_order_id,
            self.cl_ord_id == other.cl_ord_id,
            self.orig_cl_ord_id == other.orig_cl_ord_id,
            self.cxl_rej_reason == other.cxl_rej_reason
        ])
        
    


class RiskResult(BinaryCodec):
    def __init__(self):
        self.unique_order_id = ''
        self.risk_status = 0
        self.risk_reason = ''
    
    def encode(self, buffer: ByteBuf):
        put_string(buffer, self.unique_order_id, 'u32')
        buffer.write_u8(self.risk_status)
        put_string(buffer, self.risk_reason, 'u32')
    
    def decode(self, buffer: ByteBuf):
        self.unique_order_id = get_string(buffer,'u32')
        self.risk_status = buffer.read_u8()
        self.risk_reason = get_string(buffer,'u32')
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.unique_order_id == other.unique_order_id,
            self.risk_status == other.risk_status,
            self.risk_reason == other.risk_reason
        ])
        
    
factory = RcBinaryMessageFactory()
factory.register(100101, NewOrder)
factory.register(200102, OrderConfirm)
factory.register(200115, ExecutionReport)
factory.register(190007, OrderCancel)
factory.register(290008, CancelReject)
factory.register(800001, RiskResult)

class RcBinary(BinaryCodec):
    def __init__(self):
        self.msg_type = 0
        self.version = 0
        self.msg_body_len = 0
        self.body = None
    
    def encode(self, buffer: ByteBuf):
        buffer.write_u32(self.msg_type)
        buffer.write_u32(self.version)
        msg_body_len_pos = buffer.write_index
        buffer.write_u32(0)
        body_start = buffer.write_index
        self.body.encode(buffer)
        body_end = buffer.write_index
        self.msg_body_len = body_end - body_start
        buffer.write_u32_at(msg_body_len_pos, self.msg_body_len)
    
    def decode(self, buffer: ByteBuf):
        self.msg_type = buffer.read_u32()
        self.version = buffer.read_u32()
        self.msg_body_len = buffer.read_u32()
        self.body = factory.create(self.msg_type)
        self.body.decode(buffer)
    
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return all([
            self.msg_type == other.msg_type,
            self.version == other.version,
            self.msg_body_len == other.msg_body_len,
            self.body == other.body
        ])
        
    

