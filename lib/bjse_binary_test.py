# Code generated by fin-protoc. DO NOT EDIT.
import unittest

from bjse_binary import *

class TestLogon(unittest.TestCase):
    def setUp(self):
        self.packet = Logon()
        self.packet.sender_comp_id = "xxxxxxxxxxxxxxxxxxxx"
        self.packet.target_comp_id = "xxxxxxxxxxxxxxxxxxxx"
        self.packet.heart_bt_int = 4
        self.packet.password = "xxxxxxxxxxxxxxxx"
        self.packet.default_appl_ver_id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = Logon()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestLogout(unittest.TestCase):
    def setUp(self):
        self.packet = Logout()
        self.packet.session_status = 4
        self.packet.text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = Logout()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestHeartbeat(unittest.TestCase):
    def setUp(self):
        self.packet = Heartbeat()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = Heartbeat()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestNewOrder(unittest.TestCase):
    def setUp(self):
        appl_extend = ExtendNewOrder010()
        appl_extend.stop_px = 8
        appl_extend.min_qty = 8
        appl_extend.max_price_levels = 2
        appl_extend.time_in_force = "x"
        appl_extend.cash_margin = "x"
        appl_extend.settl_type = "x"
        appl_extend.settl_period = "x"
        self.packet = NewOrder()
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.order_restrictions = "xxxx"
        self.packet.side = "x"
        self.packet.ord_type = "x"
        self.packet.order_qty = 8
        self.packet.price = 8
        self.packet.appl_id = "010"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = NewOrder()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder010(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder010()
        self.packet.stop_px = 8
        self.packet.min_qty = 8
        self.packet.max_price_levels = 2
        self.packet.time_in_force = "x"
        self.packet.cash_margin = "x"
        self.packet.settl_type = "x"
        self.packet.settl_period = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder010()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder041(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder041()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder041()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder042(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder042()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder042()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder043(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder043()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder043()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder044(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder044()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder044()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder045(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder045()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder045()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder040(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder040()
        self.packet.stop_px = 8
        self.packet.min_qty = 8
        self.packet.max_price_levels = 2
        self.packet.time_in_force = "x"
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder040()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExtendNewOrder050(unittest.TestCase):
    def setUp(self):
        self.packet = ExtendNewOrder050()
        self.packet.expiration_days = 2
        self.packet.expiration_type = 1
        self.packet.share_property = "xx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExtendNewOrder050()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestOrderCancelRequest(unittest.TestCase):
    def setUp(self):
        self.packet = OrderCancelRequest()
        self.packet.appl_id = "xxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.orig_cl_ord_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        self.packet.order_qty = 8
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = OrderCancelRequest()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestCancelReject(unittest.TestCase):
    def setUp(self):
        self.packet = CancelReject()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.appl_id = "xxx"
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.orig_cl_ord_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.ord_status = "x"
        self.packet.cxl_rej_reason = 2
        self.packet.reject_text = "xxxxxxxxxxxxxxxx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = CancelReject()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExecutionConfirm(unittest.TestCase):
    def setUp(self):
        appl_extend = ConfirmExtend010()
        appl_extend.stop_px = 8
        appl_extend.min_qty = 8
        appl_extend.max_price_levels = 2
        appl_extend.time_in_force = "x"
        appl_extend.cash_margin = "x"
        self.packet = ExecutionConfirm()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.orig_cl_ord_id = "xxxxxxxxxx"
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.exec_type = "x"
        self.packet.ord_status = "x"
        self.packet.ord_rej_reason = 2
        self.packet.leaves_qty = 8
        self.packet.cum_qty = 8
        self.packet.side = "x"
        self.packet.ord_type = "x"
        self.packet.order_qty = 8
        self.packet.price = 8
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.order_restrictions = "xxxx"
        self.packet.appl_id = "010"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExecutionConfirm()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend010(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend010()
        self.packet.stop_px = 8
        self.packet.min_qty = 8
        self.packet.max_price_levels = 2
        self.packet.time_in_force = "x"
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend010()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend041(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend041()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend041()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend042(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend042()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend042()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend043(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend043()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend043()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend044(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend044()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend044()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend045(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend045()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend045()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend040(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend040()
        self.packet.stop_px = 8
        self.packet.min_qty = 8
        self.packet.max_price_levels = 2
        self.packet.time_in_force = "x"
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend040()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestConfirmExtend050(unittest.TestCase):
    def setUp(self):
        self.packet = ConfirmExtend050()
        self.packet.expiration_days = 2
        self.packet.expiration_type = 1
        self.packet.share_property = "xx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ConfirmExtend050()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestExecutionReport(unittest.TestCase):
    def setUp(self):
        appl_extend = ReportExtend010()
        appl_extend.cash_margin = "x"
        appl_extend.settl_type = "x"
        appl_extend.settl_period = "x"
        self.packet = ExecutionReport()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.exec_type = "x"
        self.packet.ord_status = "x"
        self.packet.last_px = 8
        self.packet.last_qty = 8
        self.packet.leaves_qty = 8
        self.packet.cum_qty = 8
        self.packet.side = "x"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.appl_id = "010"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ExecutionReport()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestReportExtend010(unittest.TestCase):
    def setUp(self):
        self.packet = ReportExtend010()
        self.packet.cash_margin = "x"
        self.packet.settl_type = "x"
        self.packet.settl_period = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ReportExtend010()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestReportExtend040(unittest.TestCase):
    def setUp(self):
        self.packet = ReportExtend040()
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ReportExtend040()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestReportExtend050(unittest.TestCase):
    def setUp(self):
        self.packet = ReportExtend050()
        self.packet.expiration_days = 2
        self.packet.expiration_type = 1
        self.packet.maturity_date = 4
        self.packet.share_property = "xx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ReportExtend050()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuote(unittest.TestCase):
    def setUp(self):
        appl_extend = QuoteExtend070()
        appl_extend.branch_id = "xx"
        appl_extend.quote_id = "xxxxxxxxxx"
        appl_extend.quote_resp_id = "xxxxxxxxxx"
        appl_extend.private_quote = 1
        appl_extend.valid_until_time = 8
        appl_extend.price_type = 1
        appl_extend.cash_margin = "x"
        appl_extend.counter_party_pbuid = "xxxxxx"
        appl_extend.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet = Quote()
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.quote_msg_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.quote_req_id = "xxxxxxxxxx"
        self.packet.quote_type = 1
        self.packet.bid_px = 8
        self.packet.offer_px = 8
        self.packet.bid_size = 8
        self.packet.offer_size = 8
        self.packet.appl_id = "070"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = Quote()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuoteExtend070(unittest.TestCase):
    def setUp(self):
        self.packet = QuoteExtend070()
        self.packet.branch_id = "xx"
        self.packet.quote_id = "xxxxxxxxxx"
        self.packet.quote_resp_id = "xxxxxxxxxx"
        self.packet.private_quote = 1
        self.packet.valid_until_time = 8
        self.packet.price_type = 1
        self.packet.cash_margin = "x"
        self.packet.counter_party_pbuid = "xxxxxx"
        self.packet.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = QuoteExtend070()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuoteExtend071(unittest.TestCase):
    def setUp(self):
        self.packet = QuoteExtend071()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = QuoteExtend071()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuoteStatusReport(unittest.TestCase):
    def setUp(self):
        quote_1 = Quote1()
        quote_1.quote_id = "xxxxxxxxxx"
        quote_1.quote_price = 8
        quote_1.quote_qty = 8
        appl_extend = QuoteStatusReportExtend070()
        appl_extend.branch_id = "xx"
        appl_extend.order_id = "xxxxxxxxxxxxxxxx"
        appl_extend.exec_id = "xxxxxxxxxxxxxxxx"
        appl_extend.quote_resp_id = "xxxxxxxxxx"
        appl_extend.private_quote = 1
        appl_extend.side = "x"
        appl_extend.price_type = 1
        appl_extend.valid_until_time = 8
        appl_extend.cash_margin = "x"
        appl_extend.counter_party_pbuid = "xxxxxx"
        appl_extend.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        appl_extend.quote_1 = [quote_1]
        self.packet = QuoteStatusReport()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.quote_msg_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.quote_req_id = "xxxxxxxxxx"
        self.packet.quote_rject_reason = 8
        self.packet.quote_type = 1
        self.packet.bid_px = 8
        self.packet.offer_px = 8
        self.packet.bid_size = 8
        self.packet.offer_size = 8
        self.packet.appl_id = "070"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = QuoteStatusReport()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuoteStatusReportExtend070(unittest.TestCase):
    def setUp(self):
        quote_1 = Quote1()
        quote_1.quote_id = "xxxxxxxxxx"
        quote_1.quote_price = 8
        quote_1.quote_qty = 8
        self.packet = QuoteStatusReportExtend070()
        self.packet.branch_id = "xx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.quote_resp_id = "xxxxxxxxxx"
        self.packet.private_quote = 1
        self.packet.side = "x"
        self.packet.price_type = 1
        self.packet.valid_until_time = 8
        self.packet.cash_margin = "x"
        self.packet.counter_party_pbuid = "xxxxxx"
        self.packet.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.quote_1 = [quote_1]
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = QuoteStatusReportExtend070()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuoteResponse(unittest.TestCase):
    def setUp(self):
        quote_2 = Quote2()
        quote_2.quote_id = "xxxxxxxxxx"
        quote_2.quote_price = 8
        quote_2.quote_qty = 8
        appl_extend = QuoteResponseExtend070()
        appl_extend.cash_margin = "x"
        self.packet = QuoteResponse()
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.quote_resp_id = "xxxxxxxxxx"
        self.packet.quote_resp_type = 1
        self.packet.side = "x"
        self.packet.valid_until_time = 8
        self.packet.quote_type = 1
        self.packet.price_type = 1
        self.packet.quote_2 = [quote_2]
        self.packet.appl_id = "070"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = QuoteResponse()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestQuoteResponseExtend070(unittest.TestCase):
    def setUp(self):
        self.packet = QuoteResponseExtend070()
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = QuoteResponseExtend070()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestAllegeQuote(unittest.TestCase):
    def setUp(self):
        appl_extend = AllegeQuoteExtend070()
        appl_extend.cash_margin = "x"
        appl_extend.counter_party_pbuid = "xxxxxx"
        self.packet = AllegeQuote()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.quote_req_id = "xxxxxxxxxx"
        self.packet.quote_id = "xxxxxxxxxx"
        self.packet.quote_resp_id = "xxxxxxxxxx"
        self.packet.quote_type = 1
        self.packet.bid_px = 8
        self.packet.offer_px = 8
        self.packet.bid_size = 8
        self.packet.offer_size = 8
        self.packet.private_quote = 1
        self.packet.valid_until_time = 8
        self.packet.price_type = 1
        self.packet.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.appl_id = "070"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = AllegeQuote()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestAllegeQuoteExtend070(unittest.TestCase):
    def setUp(self):
        self.packet = AllegeQuoteExtend070()
        self.packet.cash_margin = "x"
        self.packet.counter_party_pbuid = "xxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = AllegeQuoteExtend070()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestAllegeQuoteResponse(unittest.TestCase):
    def setUp(self):
        self.packet = AllegeQuoteResponse()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.appl_id = "xxx"
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.order_id = "xxxxxxxxxxxxxxxx"
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.cl_ord_id = "xxxxxxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.quote_id = "xxxxxxxxxx"
        self.packet.quote_resp_id = "xxxxxxxxxx"
        self.packet.quote_resp_type = 1
        self.packet.private_quote = 1
        self.packet.order_qty = 8
        self.packet.price = 8
        self.packet.valid_until_time = 8
        self.packet.quote_type = 1
        self.packet.price_type = 1
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = AllegeQuoteResponse()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReport(unittest.TestCase):
    def setUp(self):
        appl_extend = TradeCaptureReportExtend031()
        appl_extend.member_id = "xxxxxx"
        appl_extend.trader_code = "xxxxx"
        appl_extend.counter_party_member_id = "xxxxxx"
        appl_extend.counter_party_trader_code = "xxxxx"
        appl_extend.settl_type = "x"
        appl_extend.settl_period = "x"
        appl_extend.cash_margin = "x"
        appl_extend.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet = TradeCaptureReport()
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.trade_report_id = "xxxxxxxxxx"
        self.packet.trade_report_type = 1
        self.packet.trade_report_trans_type = 1
        self.packet.trade_handling_instr = "x"
        self.packet.trade_report_ref_id = "xxxxxxxxxx"
        self.packet.last_px = 8
        self.packet.last_qty = 8
        self.packet.trd_type = 2
        self.packet.trd_sub_type = 2
        self.packet.confirm_id = 4
        self.packet.side = "x"
        self.packet.pbuid = "xxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.counter_party_pbuid = "xxxxxx"
        self.packet.counter_party_account_id = "xxxxxxxxxx"
        self.packet.counter_party_branch_id = "xx"
        self.packet.appl_id = "031"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReport()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportExtend031(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportExtend031()
        self.packet.member_id = "xxxxxx"
        self.packet.trader_code = "xxxxx"
        self.packet.counter_party_member_id = "xxxxxx"
        self.packet.counter_party_trader_code = "xxxxx"
        self.packet.settl_type = "x"
        self.packet.settl_period = "x"
        self.packet.cash_margin = "x"
        self.packet.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportExtend031()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportExtend051(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportExtend051()
        self.packet.expiration_days = 2
        self.packet.expiration_type = 1
        self.packet.share_property = "xx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportExtend051()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportExtend060(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportExtend060()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportExtend060()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportExtend061(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportExtend061()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportExtend061()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportExtend062(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportExtend062()
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportExtend062()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportAck(unittest.TestCase):
    def setUp(self):
        appl_extend = TradeCaptureReportAckExtend031()
        appl_extend.member_id = "xxxxxx"
        appl_extend.trader_code = "xxxxx"
        appl_extend.counter_party_member_id = "xxxxxx"
        appl_extend.counter_party_trader_code = "xxxxx"
        appl_extend.settl_type = "x"
        appl_extend.settl_period = "x"
        appl_extend.cash_margin = "x"
        appl_extend.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet = TradeCaptureReportAck()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.trade_id = "xxxxxxxxxxxxxxxx"
        self.packet.trade_report_id = "xxxxxxxxxx"
        self.packet.trade_report_type = 1
        self.packet.trade_report_trans_type = 1
        self.packet.trade_handling_instr = "x"
        self.packet.trade_report_ref_id = "xxxxxxxxxx"
        self.packet.trd_ack_status = 1
        self.packet.trd_rpt_status = 1
        self.packet.trade_report_reject_reason = 2
        self.packet.last_px = 8
        self.packet.last_qty = 8
        self.packet.trd_type = 2
        self.packet.trd_sub_type = 2
        self.packet.confirm_id = 4
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.side = "x"
        self.packet.pbuid = "xxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.counter_party_pbuid = "xxxxxx"
        self.packet.counter_party_account_id = "xxxxxxxxxx"
        self.packet.counter_party_branch_id = "xx"
        self.packet.appl_id = "031"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportAck()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportAckExtend031(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportAckExtend031()
        self.packet.member_id = "xxxxxx"
        self.packet.trader_code = "xxxxx"
        self.packet.counter_party_member_id = "xxxxxx"
        self.packet.counter_party_trader_code = "xxxxx"
        self.packet.settl_type = "x"
        self.packet.settl_period = "x"
        self.packet.cash_margin = "x"
        self.packet.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportAckExtend031()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportAckExtend051(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportAckExtend051()
        self.packet.expiration_days = 2
        self.packet.expiration_type = 1
        self.packet.share_property = "xx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportAckExtend051()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportAckExtend060(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportAckExtend060()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportAckExtend060()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportAckExtend061(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportAckExtend061()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportAckExtend061()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureReportAckExtend062(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureReportAckExtend062()
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureReportAckExtend062()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureConfirm(unittest.TestCase):
    def setUp(self):
        appl_extend = TradeCaptureConfirmExtend031()
        appl_extend.member_id = "xxxxxx"
        appl_extend.trader_code = "xxxxx"
        appl_extend.counter_party_member_id = "xxxxxx"
        appl_extend.counter_party_trader_code = "xxxxx"
        appl_extend.settl_type = "x"
        appl_extend.settl_period = "x"
        appl_extend.cash_margin = "x"
        appl_extend.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet = TradeCaptureConfirm()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.reporting_pbuid = "xxxxxx"
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.owner_type = 2
        self.packet.clearing_firm = "xx"
        self.packet.transact_time = 8
        self.packet.user_info = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet.trade_id = "xxxxxxxxxxxxxxxx"
        self.packet.trade_report_id = "xxxxxxxxxx"
        self.packet.trade_report_type = 1
        self.packet.trade_report_trans_type = 1
        self.packet.trade_handling_instr = "x"
        self.packet.last_px = 8
        self.packet.last_qty = 8
        self.packet.trd_type = 2
        self.packet.trd_sub_type = 2
        self.packet.confirm_id = 4
        self.packet.exec_id = "xxxxxxxxxxxxxxxx"
        self.packet.side = "x"
        self.packet.pbuid = "xxxxxx"
        self.packet.account_id = "xxxxxxxxxx"
        self.packet.branch_id = "xx"
        self.packet.counter_party_pbuid = "xxxxxx"
        self.packet.counter_party_account_id = "xxxxxxxxxx"
        self.packet.counter_party_branch_id = "xx"
        self.packet.appl_id = "031"
        self.packet.appl_extend = appl_extend
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureConfirm()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureConfirmExtend031(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureConfirmExtend031()
        self.packet.member_id = "xxxxxx"
        self.packet.trader_code = "xxxxx"
        self.packet.counter_party_member_id = "xxxxxx"
        self.packet.counter_party_trader_code = "xxxxx"
        self.packet.settl_type = "x"
        self.packet.settl_period = "x"
        self.packet.cash_margin = "x"
        self.packet.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureConfirmExtend031()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureConfirmExtend051(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureConfirmExtend051()
        self.packet.expiration_days = 2
        self.packet.expiration_type = 1
        self.packet.maturity_date = 4
        self.packet.share_property = "xx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureConfirmExtend051()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureConfirmExtend060(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureConfirmExtend060()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureConfirmExtend060()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureConfirmExtend061(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureConfirmExtend061()
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureConfirmExtend061()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradeCaptureConfirmExtend062(unittest.TestCase):
    def setUp(self):
        self.packet = TradeCaptureConfirmExtend062()
        self.packet.cash_margin = "x"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradeCaptureConfirmExtend062()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestBusinessReject(unittest.TestCase):
    def setUp(self):
        self.packet = BusinessReject()
        self.packet.appl_id = "xxx"
        self.packet.transact_time = 8
        self.packet.submitting_pbuid = "xxxxxx"
        self.packet.security_id = "xxxxxxxx"
        self.packet.security_id_source = "xxxx"
        self.packet.ref_seq_num = 8
        self.packet.ref_msg_type = 4
        self.packet.business_reject_ref_id = "xxxxxxxxxx"
        self.packet.business_reject_reason = 2
        self.packet.business_reject_text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = BusinessReject()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestReportSynchronization(unittest.TestCase):
    def setUp(self):
        report_partition_sync = ReportPartitionSync()
        report_partition_sync.partition_no = 4
        report_partition_sync.report_index = 8
        self.packet = ReportSynchronization()
        self.packet.report_partition_sync = [report_partition_sync]
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ReportSynchronization()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestTradingSessionStatus(unittest.TestCase):
    def setUp(self):
        self.packet = TradingSessionStatus()
        self.packet.market_id = "xxx"
        self.packet.market_segment_id = "xxx"
        self.packet.trading_session_id = "xxx"
        self.packet.trading_session_sub_id = "xxx"
        self.packet.trad_ses_status = 1
        self.packet.trad_ses_start_time = 8
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = TradingSessionStatus()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestPlatformStateInfo(unittest.TestCase):
    def setUp(self):
        self.packet = PlatformStateInfo()
        self.packet.platform_id = 2
        self.packet.platform_state = 2
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = PlatformStateInfo()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestReportFinished(unittest.TestCase):
    def setUp(self):
        self.packet = ReportFinished()
        self.packet.partition_no = 4
        self.packet.report_index = 8
        self.packet.platform_id = 2
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = ReportFinished()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestPlatformInfo(unittest.TestCase):
    def setUp(self):
        no_partitions = NoPartitions()
        no_partitions.partition_no = 4
        no_partitions.partition_name = "xxxxxxxxxxxxxxxxxxxx"
        self.packet = PlatformInfo()
        self.packet.platform_id = 2
        self.packet.no_partitions = [no_partitions]
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = PlatformInfo()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



class TestBjseBinary(unittest.TestCase):
    def setUp(self):
        body = Logon()
        body.sender_comp_id = "xxxxxxxxxxxxxxxxxxxx"
        body.target_comp_id = "xxxxxxxxxxxxxxxxxxxx"
        body.heart_bt_int = 4
        body.password = "xxxxxxxxxxxxxxxx"
        body.default_appl_ver_id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        self.packet = BjseBinary()
        self.packet.body_length = 4
        self.packet.msg_type = 1
        self.packet.body = body
        self.packet.checksum = 4
        

    def test_encode_decode(self):
        buf = ByteBuf()
        self.packet.encode(buf)
        decoded_packet = BjseBinary()
        decoded_packet.decode(buf)
        self.assertEqual(decoded_packet, self.packet)



if __name__ == '__main__':
    unittest.main()
